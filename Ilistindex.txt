/*
 * Created by Ranorex
 * User: brock.fredin
 * Date: 8/30/2012
 * Time: 9:04 AM
 * 
 * To change this template use Tools | Options | Coding | Edit Standard Headers.
 */
using System;
using System.Diagnostics;
using System.IO;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;
using Microsoft.Win32;
using System.Windows.Forms; 
using System.Globalization; 



using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;

using portalqa.formatted.testcases;

namespace portalqa.formatted.code
{
    /// <summary>
    /// Description of utility.
    /// </summary>
    [TestModule("9EA6534F-128E-4032-8C2D-82D76108F6D2", ModuleType.UserCode, 1)]
    public class utility : ITestModule
    {
        public static string StackPortal = "405";
        public static string RequestID;  
        public static string checkRequestID;  
        public static string PatientName; 
       	public static string monthCount; 
        public static string UserNameStr = string.Empty;
		public static string PasswordStr = string.Empty;
		public static string[] btnCntrlStr2 = {"/dom[@domain='devvprtweb{0}']//form[@title='Warning']/button[@text='OK']"}; 
		public static string[] PortalResultsLogInNamesArr = {string.Empty};
		public static string QAnetworkPath = string.Empty;
		public static string QATemplatePath = string.Empty; 
		public static string ClipboardData = string.Empty; 
		public static string MRN = string.Empty; 
		public static string FacilityName = string.Empty;
		public static string QACompleted = string.Empty;
		public static string Procedure = string.Empty;
		public static string ArrivedCentralTime = string.Empty;
		public static string ArrivedMountainTime = string.Empty;
		public static string DateAttached = string.Empty; 
		public static string MonthCount; 
        public static string ReportCount; 
		public static int CompletedQA;
		public static ArrayList CentralTimeArray = new ArrayList(); 
		public static ArrayList MountainTimeArray = new ArrayList(); 
		public static ArrayList CentralTimeQACreatedArray = new ArrayList();
		public static ArrayList MountainTimeQACreatedArray = new ArrayList(); 
		public static ArrayList RowInnerNum = new ArrayList();
		
        public utility()
        {
            // Do not delete - a parameterless constructor is required!
        }

        /// <summary>
        /// Performs the playback of actions in this module.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.0;
        }
        
        public static void CountDoublePercent2(string row1, string row2, string total)
        {     
            //trims
            string trimRow1 = string.Empty; 
            string trimRow2 = string.Empty;
            string trimTotal = string.Empty; 
            
            //Deals with any foreign characters in cells.  Also could use regex.replace().  Could be extended with {'%', '.', ',',}
            char[] myTrim = {'%'};
            
            //Double Conversion Fields     
            double doubleRow1 = -1.00;
            double doubleRow2 = -1.00;
            double doubleTotal = -1.00; 
           
            //finalTotal = Total cell converted to double.  rowTotal = subTotal from rows.  rowTotaltmp = temp conversion
            double rowTotal = -1.00; 
            double finalTotal = -1.00;
            
            //logs
            Report.Info("This is the value from ROW 1: " + row1);
            Report.Info("This is the value from ROW 2: " +  row2);
            Report.Info("This is the value from the TOTAL FIELD (That should match): " +  total);
            
            //trim replacement using myTrim
            trimRow1 = row1.TrimEnd(myTrim); 
            trimRow2 = row2.TrimEnd(myTrim); 
            trimTotal = total.TrimEnd(myTrim); 
            
            //double conversions
            doubleRow1 = Convert.ToDouble(trimRow1); 
            doubleRow2 = Convert.ToDouble(trimRow2); 
            doubleTotal = Convert.ToDouble(trimTotal); 
            
            //total calcuations
            rowTotal = doubleRow2 / doubleRow1; 
            finalTotal = doubleTotal; 
            
            //Compare statement.  Could use a try catch as well
            if(doubleTotal == finalTotal)
            	{
            		Report.Success("The cells match"); 
           		}
            	else
           		{
            		Report.Failure("The cells DO NOT match.  Calculation may be wrong"); 
           		}
            	
        }
        
		public static void CountDoublePercent(string row1, string row2, string total)
        {     
            //trims
            string trimRow1 = string.Empty; 
            string trimRow2 = string.Empty;
            string trimTotal = string.Empty; 
            
            //Deals with any foreign characters in cells.  Also could use regex.replace().  Could be extended with {'%', '.', ',',}
            char[] myTrim = {'%'};
            
            //Double Conversion Fields     
            double doubleRow1 = -1.00;
            double doubleRow2 = -1.00;
            double doubleTotal = -1.00; 
           
            //finalTotal = Total cell converted to double.  rowTotal = subTotal from rows.  rowTotaltmp = temp conversion
            double rowTotal = -1.00; 
            double finalTotal = -1.00;
            
            //logs
            Report.Info("This is the value from ROW 1: " + row1);
            Report.Info("This is the value from ROW 2: " +  row2);
            Report.Info("This is the value from the TOTAL FIELD (That should match): " +  total);
            
            //trim replacement using myTrim
            trimRow1 = row1.TrimEnd(myTrim); 
            trimRow2 = row2.TrimEnd(myTrim); 
            trimTotal = total.TrimEnd(myTrim); 
            
            //double conversions
            doubleRow1 = Convert.ToDouble(trimRow1); 
            doubleRow2 = Convert.ToDouble(trimRow2); 
            doubleTotal = Convert.ToDouble(trimTotal); 
            
            //total calcuations
            rowTotal = doubleRow1 + doubleRow2; 
            finalTotal = doubleTotal; 
            
            //Compare statement.  Could use a try catch as well
            if(rowTotal == finalTotal)
            	{
            		Report.Success("The cells match"); 
           		}
            	else
           		{
            		Report.Failure("The cells DO NOT match.  Calculation may be wrong"); 
           		}
            	
        }
		
		public static void OpenExcel()
		{
			
        	Ranorex.DivTag export = portalqaRepository.Instance.portal.QAReports.ExportExcel;
        	//Ranorex.WebElement export = "/dom[@domain='devvprtweb407']//tr[#'ctl00_ctl00_Content_ContentPlaceHolderMain_ReportGrid_ctl00__0']";
        	//Ranorex.DivTag export = "//div[#'ctl00_ctl00_Content_ContentPlaceHolderMain_ReportGrid']";
        	Ranorex.Button openButton = null; 
        	Ranorex.Button openExcelButton = null;
        	Ranorex.Form maximize = null; 
        	ArrayList btnArr = new ArrayList();
        	Duration timeout = 30000; 
        	Ranorex.SpanTag btn2;
        	IList<Ranorex.SpanTag> myList = export.FindDescendants<Ranorex.SpanTag>();
        	//btnArr.Add(btnStr); 
        	
        	foreach(Ranorex.SpanTag tag in myList)
        	{
        		if(tag.InnerText.Contains("Export To Excel"))
        		   {
	        		   	tag.Click();
	        		   	
	        		   	while(portalqaRepository.Instance.Download.Self.Visible || portalqaRepository.Instance.ExcelTools.Self.Visible == true)
	        		   	{
	        		   			//Ranorex.Mouse.Click(portalqaRepository.Instance.Download.open); 
	         
	        		   			if(portalqaRepository.Instance.Download.openInfo.Exists())
					        	{
					        		Host.Local.TryFindSingle(portalqaRepository.Instance.Download.openInfo.AbsolutePath.ToString(), timeout, out openButton);
			        		   		openButton.MoveTo(); 
			        		   		openButton.Click();
					        	}
	        		   			
	        		   			Ranorex.Mouse.Click(portalqaRepository.Instance.ExcelTools.ExcelYes);
	        		   			portalqaRepository.Instance.ExcelProcess.Self.Maximize(); 
	        		 
	        		   			if(portalqaRepository.Instance.ExcelTools.ExcelYesInfo.Exists())
	        		   			{
	        		   				Keyboard.Press("{Left}{Return}");
	        		   				
	        		   				if(portalqaRepository.Instance.ExcelTools.ExcelYesInfo.Exists())
	        		   				{
	        		   					Host.Local.TryFindSingle(portalqaRepository.Instance.ExcelTools.ExcelYesInfo.AbsolutePath.ToString(), timeout, out openExcelButton);
				        		   		openExcelButton.MoveTo();
				        		   		openExcelButton.Click();
	        		   				}
	        		   				
			        		   		/*if(openExcelButton.Visible == true)
			        		   		{
			        		   			Keyboard.Press("{Left}{Return}");
			        		   			openExcelButton.MoveTo();
			        		   			openExcelButton.Click(); 
			        		   		}*/
			        	
	        		   			}
	        		   			
	        		   			Host.Local.TryFindSingle(portalqaRepository.Instance.ExcelProcess.SelfInfo.AbsolutePath.ToString(), timeout, out maximize);
	        		   			maximize.Maximize(); 
	        		   			//portalqaRepository.Instance.ExcelProcess.Self.Maximize();
	        		   			break;
	        		   		  //portalqaRepository.Instance.Download.SelfInfo.WaitForNotExists(120000);
	        		   		
	        		   	}
	        		   	
	        		   	/*while(repo.ExcelTools.Self.Visible == true)
	        		   	{
	        		   		repo.ExcelTools.ExcelYes.Click(); 
	        		   		//repo.ExcelTools.ExcelYes.PressKeys("{Return}"); 
	        		   		//repo.ExcelTools.SelfInfo.WaitForNotExists(120000);
	        		   	}*/
        		}
	        	
        	}
        
        }
		
		public static void QATemplate(string requestID)
		{
			Ranorex.Form qaTemplatePath = null; 
			string tmpPath = string.Format(@"\\devmrprweb{0}\c$\MRP\MRPrRepository\System\QA\LetterTemplates\", StackPortal).ToString();
			QATemplatePath = tmpPath; 
			
			Duration timeout = 3000;
			
			try
        	{
				
				ProcessStartInfo startInfo = new ProcessStartInfo("explorer.exe");
	        	startInfo.WindowStyle = ProcessWindowStyle.Maximized;
	        	startInfo.Arguments = tmpPath;
				Process.Start(startInfo);
        	}
        	
        	catch(Exception e)
        	{
        		Report.Failure("The window did not open correctly"); 
        	}
        	
        	Delay.Duration(3000); 
        	
        	if(tmpPath != null)
        	{
        		
        		Report.Info("window found"); 
        		
        	}
        	else
        	{
        		Report.Info("window NOT found"); 
        	}
		}
		
		public static void QALetter(string requestID)
		{
			
			string tmpPath = string.Format(@"\\devmrprweb{0}\c$\MRP\MRPrRepository\ClientQALetters\{1}", StackPortal, requestID).ToString();
			Duration timeout = 3000;
			
			QAnetworkPath = tmpPath;
			
			try
        	{
				
				ProcessStartInfo startInfo = new ProcessStartInfo("explorer.exe");
	        	startInfo.WindowStyle = ProcessWindowStyle.Maximized;
	        	startInfo.Arguments = tmpPath;
				Process.Start(startInfo);
        	}
        	
        	catch(Exception e)
        	{
        		Report.Failure("The window did not open correctly"); 
        	}
        	
        	Delay.Duration(3000); 
        	
        	if(tmpPath != null)
        	{
        		
        		Report.Info("window found"); 
        		
        	}
        	else
        	{
        		Report.Info("window NOT found"); 
        	}
			
		}
		
		public static void QALetterBackup(string requestID)
		{
			Ranorex.Form qaNetworkPath = null; 
			string tmpPath = string.Format(@"\\devmrprweb{0}\c$\MRP\MRPrRepository\ClientQALetters\{1}", StackPortal, requestID);
			Ranorex.WebElement formPath = tmpPath;
			Duration timeout = 3000;
			
			try
			{
				formPath.GetPath().ToString(); 
				
				//found = Host.Local.TryFindSingle(string.Format(@"\\devmrprweb{0}\c$\MRP\MRPrRepository\ClientQALetters\{1}", StackPortal, requestID), timeout, out qaNetworkPath);
					
				if(Host.Local.TryFindSingle(tmpPath, timeout, out qaNetworkPath))
				{
					QAnetworkPath = qaNetworkPath.GetPath().ToString();
					//QAnetworkPath = qaNetworkPath.ToString(); 
					
					qaNetworkPath.Activate();
					formPath.GetPath(); 
					
					
					Report.Info("window found"); 
				}
				else
				{
					Report.Info("Window find failure"); 
				}
			}
			
			catch(Ranorex.RanorexException e)
			{
				Report.Info("failure"); 
			}
		
			//QAnetworkPath = string.Format(@"\\devmrprweb{0}\c$\MRP\MRPrRepository\ClientQALetters\{1}", StackPortal, requestID);
			//QATemplatePath = string.Format(@" \\devmrprweb{0}\c$\MRP\MRPrRepository\ClientQALetters\{1}", StackPortal, requestID); 
			
		}
		
		[STAThread]
		public static string CopyToClipboard()
		{
			ClipboardData = string.Empty; 
			IDataObject iData = Clipboard.GetDataObject();
			 
			if(iData.GetDataPresent(DataFormats.Text))
			 {
		       // Yes it is, so display it in a text box.
		       ClipboardData = (String)iData.GetData(DataFormats.Text);
			 
    		 }
   			else
   			 {
       		
      		   ClipboardData = "Could not retrieve data off the clipboard.";

			 }
		
   			 return ClipboardData; 
			
   			 Report.Info(ClipboardData);
		}
		
		
		public static void AnalyzeClipboard()
		{
//			this.MRN = MRN; 
//			this.facilityName = FacilityName; 
//			this.Procedure = Procedure;
//			this.QACompleted = QACompleted;
			bool flag = false; 
			
			try
			{
				if(ClipboardData != null && MRN != "" && FacilityName != "" && Procedure != "" && QACompleted != "")
				{
					
					if(ClipboardData.Contains(MRN))
					{ 
						Report.Info("The MRN MATCH for the patient is: ", MRN);
					}
					
					if(ClipboardData.Contains(FacilityName))
					{
						Report.Info("The FACILITY name match is: ", FacilityName); 
					}
					
					if(ClipboardData.Contains(Procedure))
					{
						Report.Info("The PROCEDURE name match is: ", Procedure); 
					}
					
					/*if(ClipboardData.Contains(QACompleted))
					{
						Report.Info("The STATUS match is: ", QACompleted); 
					}*/ 
					
					else
					{
						Report.Failure("one of the elements failed"); 
					}
				}
				else
				{
					Report.Failure("fail.  Null values can't be compared.");
						
				}
				
			}
			
			catch(Exception e)
			{
				Report.Failure("test did not pass"); 
			}
		
		}
		
		public static void AnalyzeClipboardPDF()
		{
//			this.MRN = MRN; 
//			this.facilityName = FacilityName; 
//			this.Procedure = Procedure;
//			this.QACompleted = QACompleted;
			bool flag = false; 
			
			try
			{
				if(ClipboardData != null && MRN != "" && RequestID != "")
				{
					
					if(ClipboardData.Contains(MRN))
					{ 
						Report.Info("The MRN MATCH for the patient is: ", MRN);
					}
					
					if(ClipboardData.Contains(RequestID))
					{
						Report.Info("The RequestID name match is: ", RequestID); 
					}
					
					if(ClipboardData.Contains(PatientName))
					{
						Report.Info("The RequestID name match is: ", PatientName); 
					}
					
					
					else
					{
						Report.Failure("one of the elements failed"); 
					}
				}
				else
				{
					Report.Failure("fail.  Null values can't be compared.");
						
				}
				
			}
			
			catch(Exception e)
			{
				Report.Failure("test did not pass"); 
			}
		
		}
		
		public static void SetArrivedCentralTime(string arrivedCentral)
		{
			ArrivedCentralTime = arrivedCentral; 
		}
		
		public static void SetArrivedMountainTime(string arrivedMountain)
		{
			ArrivedMountainTime = arrivedMountain; 
		}
		
		public static void SetMRN(string mrn)
		{
			MRN = mrn; 
		}
		
		public static void SetDateAttached(string dateAttached)
		{
			 DateAttached = dateAttached; 
		}
		
		public static string getDateAttached()
		{
			return DateAttached; 
		}
		
		public static void SetPatientName(string patientName)
		{
			PatientName = patientName; 
		}
		
		public static void SetRequestID(string requestID)
		{
			RequestID = requestID; 
		}
		
		public static void SetFacilityName(string facilityName)
		{
			FacilityName = facilityName; 
		}
		
		public static void SetQACompleted(string qACompleted)
		{
			QACompleted = qACompleted; 
		}
		
		public static void SetProcedure(string procedure)
		{
			Procedure = procedure; 
		}
		
		public static void Match(string report, string selected)
		{
			
			
			
		}
		
		public static bool TabCtrls(string headerCtrlStr)
		{
			string[] headerCtrlStrArr = {"Worklist", "Search", "QA Reports"};
			string[] ctrlStrArr = {"1", "2", "3"};
			string selectCtrlStr = string.Empty;
			string strlogUser = "Selected Tab: ";
			string strlogMsg = string.Empty;
			bool rtnStatus = false;
			int indexx = -1;
						
			try 
			{
				indexx = Array.IndexOf(headerCtrlStrArr, headerCtrlStr);
			
				if (indexx > -1)
				{ 
					selectCtrlStr = string.Format("/dom[@domain='devvprtweb{0}']//div[@id~'(?i:RadTabStrip1)']/div/ul/li[{2}]/a/span/span/span[@innertext='{1}']", StackPortal.ToString(), headerCtrlStrArr[indexx].ToString(), ctrlStrArr[indexx].ToString());
					Ranorex.WebElement resultsHeaderCtrl = selectCtrlStr;
					resultsHeaderCtrl.MoveTo();
					resultsHeaderCtrl.PerformClick();
					strlogUser += headerCtrlStr;
					strlogMsg = string.Format("Select item without mouse' at Center. ", ctrlStrArr[indexx].ToString());
					Delay.Milliseconds(500);
		            
		            rtnStatus = true;
				}
				
				WriteToReportType("Info", string.Format("Select item without mouse 'Ranorex.WebElement.ctl00_Content_GridApplications_ctl00_{0}_gbccolumn' at Center. {1}", ctrlStrArr[indexx].ToString(), strlogUser), "Ranorex PerformClick()");
				
				return rtnStatus;
			}
			
			catch (Exception e) 
            {
				WriteToReportType("Failure", "Unexpected exception occured: " + e.ToString());
			 	return false;			 	
			}
			
		}
		
		
		public static bool ValidateLogInUser(string inputClrtStr, string userNameStr)
		{
			string[] logStrArr = {" - Validated", " - Not Validated"};
			string logStr = string.Empty;
			string prefixStr = "Logged In As ";
			bool rtnStatus = false;
			int indexx = -1;
			
			userNameStr = PortalResultsLogInNamesArr[0].ToString();
			
			indexx = indexx = Array.IndexOf(PortalResultsLogInNamesArr, userNameStr);
			
			try 
			{
				if (indexx > -1)
				{
					userNameStr = prefixStr + userNameStr;
					Ranorex.WebElement apCtrlStr = string.Format(inputClrtStr, StackPortal.ToString(), PortalResultsLogInNamesArr[indexx].ToString());
					
					if (apCtrlStr.InnerText == userNameStr)
					{
						rtnStatus = true;
					}
					
				}
				else
				{
					TestResultsCode.WriteToReportType("Error", "Inputted User NOT In Code Array...", "User");
				}
				
				if (rtnStatus)
		        {
					logStr = userNameStr + logStrArr[0].ToString();
		        	TestResultsCode.WriteToReportType("Success", logStr, "Validate");
		        }
		        else
		        {
		        	logStr = userNameStr + logStrArr[1].ToString();
		        	TestResultsCode.WriteToReportType("Failure", logStr, "Validate");
		        }
				
		        return rtnStatus;
	        }
			
			catch (Exception e) 
            {
				WriteToReportType("Failure", "Unexpected exception occured: " + e.ToString());
			 	return false;			 	
			}
		}
		
		public static bool WriteToReportType(string minReportLevelStr, string textStr, string categoryStr = null)
		{
			string[] minReportLevelArr = {"Debug", "Info", "Warn", "Error", "Success", "Failure", "Screenshot"}; //Correct Inputs to Method
			int indexx = Array.IndexOf(minReportLevelArr, minReportLevelStr); //Did method get the correct input
			
			try 
			{
				
				if (indexx > -1) //Did Input type get found
				{
					if (categoryStr == null)
					{
						categoryStr = "User";
					}
					
					switch (minReportLevelStr) //Select correct input type
					{
						case "Debug":
							Ranorex.Report.Debug(categoryStr, textStr);
							break;
						case "Info":
							Ranorex.Report.Info(categoryStr, textStr);
							break;
						case "Warn":
							Ranorex.Report.Warn(categoryStr, textStr);
							break;
						case "Error":
							Ranorex.Report.Error(categoryStr, textStr);
							break;
						case "Success":
							Ranorex.Report.Success(categoryStr, textStr);
							break;
						case "Failure":
							Ranorex.Report.Failure(categoryStr, textStr);
							break;
						case "Screenshot":
							Ranorex.Report.Screenshot();
							break;
					}
				}
				else
				{
					WriteToReportType("Info", "Report Level Type NOT Correct: " + minReportLevelStr);
				}
				
				return true;
			}
			
			catch (Exception e) 
            {
				WriteToReportType("Failure", "Unexpected exception occured: " + e.ToString());
			 	return false;			 	
			}
		}
		
		public static void QAStatusCancelClick()
		{
			int indexx = -11;
        	int offSet = 11; 
        	int maxLoop = 0; 
        	int indexxTmp = 0; 
        	string tmpStr = string.Empty; 
        	string[] textStrArr = {"No QA opened", "Created", "Incomplete", "Complete", "Cancelled Without QA"};
        	Ranorex.DivTag grid = portalqaRepository.Instance.portal.SearchQA.Grid2;
        	//var FacilityName = repo.RISAdminUserSearch1.AOFoxHospital.Element.GetAttributeValueText("InnerText");
            Ranorex.WebElement cancel = portalqaRepository.Instance.portal.WorkList.Cancel; 
        	
            IList<Ranorex.TdTag>myList = grid.FindDescendants<Ranorex.TdTag>();
        	
        	maxLoop = (int)(myList.Count / (offSet));
        	for(int i = 0; i <= maxLoop - 1; i++)
        	    {
        	   			
        		    indexx += offSet;
        	    	myList[indexx].MoveTo(); 
        	    	tmpStr = myList[indexx].InnerText;
        	    	Report.Info(tmpStr); 
        	    	
        	    	if(tmpStr == textStrArr[1])
			        	{
			        		Report.Success("Returned result matches the associated facility"); 
			        		Report.Info("The grid record returned result is " + tmpStr); 
			        		cancel.Click(); 

			        	}
        	    }
        	
        		if(tmpStr == "No Items Found")
        		{
        			Report.Info("No items were returned and unable to do test case"); 
        		}
        		
        		if(tmpStr == "")
        		{
        			Report.Info("No items were returned and unable to complete test"); 
        			
        		}
        		
//        		if(tmpStr != FacilityName)
//        		{
//        			Report.Failure("Facilities not associated with this search are being returned in grid results");
//        		}
        	
        	    
        	    Report.Info(tmpStr);
		}
		
		public static void QAStatusDetailClick()
		{
			int indexx = -11;
        	int offSet = 11; 
        	int maxLoop = 0; 
        	int indexxTmp = 0; 
        	string tmpStr = string.Empty; 
        	string[] textStrArr = {"No QA opened", "Created", "Incomplete", "Complete", "Cancelled Without QA"};
        	Ranorex.DivTag grid = portalqaRepository.Instance.portal.SearchQA.Grid2;
        	//var FacilityName = repo.RISAdminUserSearch1.AOFoxHospital.Element.GetAttributeValueText("InnerText");
            Ranorex.WebElement details = portalqaRepository.Instance.portal.WorkList.Details; 
         
            IList<Ranorex.TdTag>myList = grid.FindDescendants<Ranorex.TdTag>();
        	
        	maxLoop = (int)(myList.Count / (offSet));
        	for(int i = 0; i <= maxLoop - 1; i++)
        	    {
        	   			
        		    indexx += offSet;
        	    	myList[indexx].MoveTo(); 
        	    	tmpStr = myList[indexx].InnerText;
        	    	Report.Info(tmpStr); 
        	    	
        	    	if(tmpStr == textStrArr[1])
			        	{
			        		Report.Success("Returned result matches the associated facility"); 
			        		Report.Info("The grid record returned result is " + tmpStr); 
			        		details.Click(); 
			        		break; 
			        	}
        	    }
        	
        		if(tmpStr == "No Items Found")
        		{
        			Report.Info("No items were returned and unable to do test case"); 
        		}
        		
        		if(tmpStr == "")
        		{
        			Report.Info("No items were returned and unable to complete test"); 
        			
        		}
        		
//        		if(tmpStr != FacilityName)
//        		{
//        			Report.Failure("Facilities not associated with this search are being returned in grid results");
//        		}
        	
        	    
        	    Report.Info(tmpStr);
		}
	
		public static void CountCell(string row1, string row2, string total)
        {       
			//trims
            string trimRow1 = string.Empty; 
            string trimRow2 = string.Empty;
            string trimRow3 = string.Empty; 
            string trimRow4 = string.Empty; 
            string trimRow5 = string.Empty; 
            string trimRow6 = string.Empty; 
            string trimTotal = string.Empty; 
            
            //Deals with any foreign characters in cells.  Also could use regex.replace().  Could be extended with {'%', '.', ',',}
            char[] myTrim = {'%'};
            
            //integer Conversion Fields     
            int intRow1 = 0;
            int intRow2 = 0;
            int intRow3 = 0;
            int intRow4 = 0;
            int intRow5 = 0;
            int intRow6 = 0;
            int intTotal = 0; 
           
            //finalTotal = Total cell converted to double.  rowTotal = subTotal from rows.  rowTotaltmp = temp conversion
            int rowTotal = 0; 
            int finalTotal = 0;
  
            //logs
            Report.Info("This is the value from ROW 1: " + row1);
            Report.Info("This is the value from ROW 2: " +  row2);
            Report.Info("This is the value from the TOTAL FIELD (That should match): " +  total);

//            if(row1.Contains('%', '.')
            
			//trim replacement using myTrim
            trimRow1 = row1.TrimEnd(myTrim);
            trimRow2 = row2.TrimEnd(myTrim); 
   //         trimRow3 = row3.TrimEnd(myTrim);
  //          trimRow4 = row4.TrimEnd(myTrim);
  //          trimRow5 = row5.TrimEnd(myTrim);
  //          trimRow5 = row6.TrimEnd(myTrim);
            trimTotal = total.TrimEnd(myTrim); 
            
            //double conversions
            intRow1 = Convert.ToInt32(trimRow1); 
            intRow2 = Convert.ToInt32(trimRow2); 
            //intRow3 = Convert.ToInt32(trimRow3); 
           // intRow4 = Convert.ToInt32(trimRow4); 
            //intRow5 = Convert.ToInt32(trimRow5); 
           // intRow6 = Convert.ToInt32(trimRow6); 
            intTotal = Convert.ToInt32(trimTotal); 
            
            //total calcuations
            rowTotal = intRow1 + intRow2; 
            finalTotal = intTotal; 
            
            //Compare statement.  Could use a try catch as well
            if(rowTotal == finalTotal)
            	{
            		Report.Success("The cells match"); 
           		}
            	else
           		{
            		Report.Failure("The cells DO NOT match.  Calculation may be wrong"); 
           		}
            	
        }
		
		 public static void CountDouble(string row1, string row2, string total)
        {
		 	
		 	//trims
            string trimRow1 = string.Empty; 
            string trimRow2 = string.Empty;
            string trimTotal = string.Empty; 
            
            
            //Deals with any foreign characters in cells.  Also could use regex.replace().  Could be extended with {'%', '.', ',',}
            char[] myTrim = {'%'};
            
            //Double Conversion Fields     
            double doubleRow1 = -1.00;
            double doubleRow2 = -1.00;
            double doubleTotal = -1.00; 
           
            //finalTotal = Total cell converted to double.  rowTotal = subTotal from rows.  rowTotaltmp = temp conversion
            double rowTotal = -1.00; 
            double finalTotal = -1.00;
            
            //logs
            Report.Info("This is the value from ROW 1: " + row1);
            Report.Info("This is the value from ROW 2: " +  row2);
            Report.Info("This is the value from the TOTAL FIELD (That should match): " +  total);
       
            //trim replacement using myTrim
            trimRow1 = row1.TrimEnd(myTrim); 
            trimRow2 = row2.TrimEnd(myTrim); 
            trimTotal = total.TrimEnd(myTrim); 
            
            //double conversions
            doubleRow1 = Convert.ToDouble(trimRow1); 
            doubleRow2 = Convert.ToDouble(trimRow2); 
            doubleTotal = Convert.ToDouble(trimTotal); 
            
            //total calcuations
            rowTotal = doubleRow1 + doubleRow2; 
            finalTotal = doubleTotal; 
            
            //Compare statement.  Could use a try catch as well
            if(rowTotal == finalTotal)
            	{
            		Report.Success("The cells match"); 
           		}
            	else
           		{
            		Report.Failure("The cells DO NOT match.  Calculation may be wrong"); 
           		}
            	
        }
		 
		 
		 	
		 	public static void CountDivideDoublePercent(string row1, string row2, string total)
        {     
            //trims
            string trimRow1 = string.Empty; 
            string trimRow2 = string.Empty;
            string trimTotal = string.Empty; 
            
            
            //Deals with any foreign characters in cells.  Also could use regex.replace().  Could be extended with {'%', '.', ',',}
            char[] myTrim = {'%'};
            
            //Double Conversion Fields     
            double doubleRow1 = -1.00;
            double doubleRow2 = -1.00;
            double doubleTotal = -1.00; 
           
            //finalTotal = Total cell converted to double.  rowTotal = subTotal from rows.  rowTotaltmp = temp conversion
            double rowTotal = -1.00; 
            double finalTotal = -1.00;
            double preLimTotal = -1.00; 
            
            
            
            //string format = String.Format("{0:#.0}", rowTotal);   
            //logs
            Report.Info("This is the value from ROW 1: " + row1);
            Report.Info("This is the value from ROW 2: " +  row2);
            Report.Info("This is the value from the TOTAL FIELD (That should match): " +  total);
            
            //trim replacement using myTrim
            trimRow1 = row1.TrimEnd(myTrim); 
            trimRow2 = row2.TrimEnd(myTrim); 
            trimTotal = total.TrimEnd(myTrim); 
            
            //double conversions
            doubleRow1 = Convert.ToDouble(trimRow1); 
            doubleRow2 = Convert.ToDouble(trimRow2); 
            //doubleTotal = Convert.ToDouble(trimTotal); 
            
            //total calcuations
            
           // introwTotal = introw2 / introw1; 
            //rowTotal = doubleRow2 / doubleRow1;
            rowTotal = doubleRow1 / doubleRow2;
            double doubRowTotal = rowTotal * 100; 
            
            //finalTotal = trimTotal; 
            
            //finalTotal = doubleTotal;
            
            string rowTotals = rowTotal.ToString("R");
            string finalTotals = trimTotal.ToString();
            //string finalTotals = finalTotal.ToString("R");
            string sRowTotals = string.Format("{0:0.000}", doubRowTotal); 
            
            //Compare statement.  Could use a try catch as well
            if(sRowTotals == finalTotals)
            	{
            		Report.Success("The cells match"); 
           		}
            	else
           		{
            		Report.Failure("The cells DO NOT match.  Calculation may be wrong"); 
           		}
            	
            	
            	
        }

		 	public static void CountD(string row1, string row2, string total)
        {
          
           
		 	//trims
            string trimRow1 = string.Empty; 
            string trimRow2 = string.Empty;
            string trimTotal = string.Empty; 
            
            //Deals with any foreign characters in cells.  Also could use regex.replace().  Could be extended with {'%', '.', ',',}
            char[] myTrim = {'%'};
            
            //Double Conversion Fields     
            double doubleRow1 = -1.00;
            double doubleRow2 = -1.00;
            double doubleTotal = -1.00; 
           
            //finalTotal = Total cell converted to double.  rowTotal = subTotal from rows.  rowTotaltmp = temp conversion
            double rowTotal = -1.00; 
            double finalTotal = -1.00;
            
            //logs
            Report.Info("This is the value from ROW 1: " + row1);
            Report.Info("This is the value from ROW 2: " +  row2);
            Report.Info("This is the value from the TOTAL FIELD (That should match): " +  total);

            //trim replacement using myTrim
            trimRow1 = row1.TrimEnd(myTrim); 
            trimRow2 = row2.TrimEnd(myTrim); 
            trimTotal = total.TrimEnd(myTrim); 
            
            //double conversions
            doubleRow1 = Convert.ToDouble(trimRow1); 
            doubleRow2 = Convert.ToDouble(trimRow2); 
            doubleTotal = Convert.ToDouble(trimTotal); 
            
            //total calcuations
            rowTotal = doubleRow1 + doubleRow2; 
            finalTotal = doubleTotal; 
            
            //Compare statement.  Could use a try catch as well
            if(rowTotal == finalTotal)
            	{
            		Report.Success("The cells match"); 
           		}
            	else
           		{
            		Report.Failure("The cells DO NOT match.  Calculation may be wrong"); 
           		}
            	
        }
        
//        public static void countMany()
//        {
//        	rowStrArr[9] row9 = new rowStrArr();
//      		row9.toString();
//        	rowStrArray = row9
//        	foreach(Ranorex.DivTag tag in rowStrArr)
//       	{
//       		Report.Info(tag.GetInnerHtml());  
//       	}
//        
//        }
		public static void DivideCell(string row1, string row2, string total)
        {       
            //trims
            string trimRow1 = string.Empty; 
            string trimRow2 = string.Empty;
            string trimRow3 = string.Empty; 
            string trimRow4 = string.Empty; 
            string trimRow5 = string.Empty; 
            string trimRow6 = string.Empty; 
            string trimTotal = string.Empty; 
            
            //Deals with any foreign characters in cells.  Also could use regex.replace().  Could be extended with {'%', '.', ',',}
            char[] myTrim = {'%'};
            
            //integer Conversion Fields     
            int intRow1 = 0;
            int intRow2 = 0;
            int intRow3 = 0;
            int intRow4 = 0;
            int intRow5 = 0;
            int intRow6 = 0;
            int intTotal = 0; 
            int divideTotal = 0; 
           
            //finalTotal = Total cell converted to double.  rowTotal = subTotal from rows.  rowTotaltmp = temp conversion
            int rowTotal = 0; 
            int finalTotal = 0;
  
            //logs
            Report.Info("This is the value from ROW 1: " + row1);
            Report.Info("This is the value from ROW 2: " +  row2);
            Report.Info("This is the value from the TOTAL FIELD (That should match): " +  total);

//            if(row1.Contains('%', '.')
            
			//trim replacement using myTrim
             trimTotal = total.TrimEnd(myTrim);
            trimRow1 = row1.TrimEnd(myTrim);
            trimRow2 = row2.TrimEnd(myTrim); 
            trimTotal = total.TrimEnd(myTrim);
            
            
            //double conversions
            intRow1 = Convert.ToInt32(trimRow1); 
            intRow2 = Convert.ToInt32(trimRow2); 
            intRow3 = Convert.ToInt32(trimRow3); 
            intRow4 = Convert.ToInt32(trimRow4); 
            intRow5 = Convert.ToInt32(trimRow5); 
            intRow6 = Convert.ToInt32(trimRow6); 
            intTotal = Convert.ToInt32(trimTotal); 
            
            //division
            rowTotal = intRow1 / intRow2; 
            divideTotal = rowTotal; 
            finalTotal = intTotal; 
            
            //Compare statement.  Could use a try catch as well
            if(divideTotal == finalTotal)
            	{
            		Report.Success("The cells match"); 
           		}
            	else
           		{
            		Report.Failure("The cells DO NOT match.  Calculation may be wrong"); 
           		}
            	
        }
		
	public static void RowCount(string ctrlStr)
		{
			 
			Ranorex.WebElement grid = null;
			bool lowerLevelException = true; 
			 
			
			try
			{
				grid = string.Format(ctrlStr.ToString(), "403"); 
			}
			
			catch(Exception e)
			{
				lowerLevelException = false;  
			}

			if(lowerLevelException)
			{
			
			
			// get all rows in table and store them in a list
			IList<Ranorex.TrTag> myRows = grid.FindDescendants<Ranorex.TrTag>();  
			// print out count of rows stored in a list   
			Report.Log(ReportLevel.Info,"Row Count: ", myRows.Count.ToString());  
			
			}
			
		}
        
		public static void ColCount(string ctrlStr)
		{
			Ranorex.WebElement apCtrlStr = null;
			bool lowerLevelException = true; 
			
			try
			{
				apCtrlStr = string.Format(ctrlStr.ToString(), "403"); 
			}
			
			catch(Exception e)
			{
				lowerLevelException = false; 
				return; 
			}

			if(lowerLevelException)
			{
				// get all columns in specified row and store them in a list
				IList<Ranorex.TdTag> myCols = apCtrlStr.FindDescendants<Ranorex.TdTag>();
			
				// print out count of columns stored in the list
				Report.Log(ReportLevel.Info,"Column Count: ", myCols.Count.ToString());
			}
	
		}
		
		public static void RowCountInnerText(string ctrlStr)
		{
			Ranorex.WebElement apCtrlStr = null;
			bool lowerLevelException = true; 
			
			try
			{
				apCtrlStr = string.Format(ctrlStr.ToString(), "403");
				
				
			}
			
			catch(Exception e)
			{
				lowerLevelException = false; 
				return; 
			}

			if(lowerLevelException)
			{
			
			// get all rows in table and store them in a list
			IList<Ranorex.TrTag> myRows = apCtrlStr.FindDescendants<Ranorex.TrTag>();
			myRows.Add(apCtrlStr.InnerText.ToString());
			// print out count of rows stored in a list   
			Report.Info(myRows.ToString());
			
			}
		}
		
		public static void ColCountInnerText(string ctrlStr)
		{
			Ranorex.WebElement apCtrlStr = null;
			
			
			try
			{
				apCtrlStr = string.Format(ctrlStr.ToString(), "403");
				
				
			}
			
			catch(Exception e)
			{
				
				return; 
			}
			
			// get all rows in table and store them in a list
			IList<Ranorex.TdTag> myCols = apCtrlStr.FindDescendants<Ranorex.TdTag>();
			myCols.Add(apCtrlStr.InnerText.ToString());
			// print out count of rows stored in a list   
			Report.Info(myCols.ToString());
			
			
		}
		
		public static void GetParentThTag(string ctrlStr) 
		{
			string tagNew = string.Empty; 
			//returns parent tag for TH tag.  Useful for identifying tables
			Ranorex.WebElement apCtrlStr = ctrlStr;
			
			apCtrlStr = string.Format(ctrlStr.ToString(), "403");
			
			try
			{
				//apCtrlStr.Element.Parent; 
				
			}
			catch(Exception e)
			{
				Report.Info("error"); 
			}
			
		}
	  	
		  public static void RowCountGen()
        {
         	var rgMasterTable = portalqa.portalqaRepository.Instance.portal.buttons.Column_Headings.rgMasterTable;
         	string total = string.Empty; 

			// get all rows in table and store them in a list
         	IList<Ranorex.TrTag> myRows = rgMasterTable.FindDescendants<Ranorex.TrTag>();
         	
         	
			// print out count of rows stored in a list   
			Report.Log(ReportLevel.Info,"Row Count: ", myRows.Count.ToString()); 
			 
			
	
			
			
			
		}
      
         public static void ColCountGen()
         {
         	var rgMasterTable = portalqa.portalqaRepository.Instance.portal.buttons.Column_Headings.rgMasterTable;
			// get all columns in specified row and store them in a list   
			IList<Ranorex.TdTag> myCols = rgMasterTable.FindDescendants<Ranorex.TdTag>();  
			// print out count of columns stored in the list   
			Report.Log(ReportLevel.Info,"Row Count: ", myCols.Count.ToString());          	
         }
         
         public static void FindSearchRow(string searchArr) 
         {
         	Ranorex.WebElement search = null; 
         	ArrayList rowNumArr = new ArrayList();
         	ArrayList orderNumArr = new ArrayList(); 
         	string apCtrlStrArr = null; 
         	bool found = true; 
         	int counter = 0;
         	int timeout = 2000; 
         	
         	while(true)
         	{
         		counter++;
         			
         		//found = Host.Local.TryFindSingle(string.Format(apCtrlStrArr[0], StackPortal.ToString, out search));
         	}
         	
         	if(found)
         	{
         		rowNumArr.Add(counter); 
         	}
         	else
         	{
         		orderNumArr.Add(counter);  
         	}
         }
         
         public static void CompareText(string inputStrTxt)
         {
         	string input = string.Empty;
         	string facility = string.Empty; 
         	bool flag = false; 
         	
         	input = Clipboard.GetText(); 
         	
         	IDataObject clipData = Clipboard.GetDataObject();
				
         	if (clipData.GetDataPresent(DataFormats.Text))
			{
				input = clipData.GetData(DataFormats.Text).ToString();
			}
			else
			{
				input = "Could not retrieve data from the clipboard.";
			}
								
         	
			
				
				
         	
				
         	
//         	
//         	if(input.Contains(facility))
//         	{
//         		//input.Contains(facility); 
//         		Report.Success("pass"); 
//         	}
         }
         
         public static void infoForEveryRow()
         {
         	 Ranorex.WebElement grid = null;
         	 Ranorex.WebElement editQA = null;
         	 Ranorex.WebElement viewQA = null;
        	 int counter = -1; 
	         IList<Ranorex.TrTag> myList = grid.FindDescendants<Ranorex.TrTag>(); 
	         IList<Ranorex.TdTag> myList2 = grid.FindDescendants<Ranorex.TdTag>();
	         Ranorex.WebElement tag = null; 
	         foreach(Ranorex.TdTag tag2 in myList2)
	         {
	         	tag2.MoveTo(); 
	         	Report.Info(tag2.InnerText);
	         	Validate.Exists(tag2);
	         }
         }
         
         public static void RowCol()
         {
         	
         	int myRowTotal = 0;
         	int totalRow = 0;
         	
         	var rgMasterTable = portalqa.portalqaRepository.Instance.portal.buttons.Column_Headings.rgMasterTable;
         	
         	// get all rows in table and store them in a list
         	IList<Ranorex.TrTag> myRows = rgMasterTable.FindDescendants<Ranorex.TrTag>();
         	
      	    // get all rows in table and store them in a list
         	IList<Ranorex.TdTag> myCols = rgMasterTable.FindDescendants<Ranorex.TdTag>(); 
         	
         	Report.Log(ReportLevel.Info,"Row Count: ", myRows.Count.ToString());
         	Report.Log(ReportLevel.Info,"Row Count: ", totalRow.ToString());
         	 
         	myRowTotal = Convert.ToInt32(myRows);
         	totalRow = myRowTotal - 1; 
         	
         	Report.Log(ReportLevel.Info,"Row Count: ", myCols.Count.ToString());  

         }
         
          public void verifyDescendingHeaders()
        {
	         Ranorex.WebElement tag2 = null; 
	         
	         var grid = portalqa.portalqaRepository.Instance.portal.buttons.Column_Headings.rgMasterTable;
	         IList<Ranorex.ThTag> myList = grid.FindDescendants<Ranorex.ThTag>();  
	         foreach(Ranorex.ThTag tag in myList )  
         {  
	         	tag.GetInnerHtml();
	         	tag2 = tag.InnerText;
	         	tag2.Click(); 
         		Delay.Milliseconds(1000);
         		tag.Click(); 
         }

        }
          
          public void verifyAscendingHeaders()
        {
	         Ranorex.WebElement tag2 = null; 
	         
	         var grid = portalqa.portalqaRepository.Instance.portal.buttons.Column_Headings.rgMasterTable;
	         IList<Ranorex.ThTag> myList = grid.FindDescendants<Ranorex.ThTag>();  
	         foreach(Ranorex.ThTag tag in myList )  
         {  
	         	tag.GetInnerHtml();
	         	tag2 = tag.InnerText;
	         	tag2.Click(); 
         	
         }
	         
	         
	
        }
          
          public static void CheckRequestID(string targStr)
	         {
	         	
	         	checkRequestID = targStr; 
	         	
	         	//portalqa.formatted.testcases.AlternateFacilityRequestIDCheck.Instance.Receive(requestID); 
	         	
	         }
          
          public static void FindTextNumber(string targStr)
          {
          	Regex rgx = new Regex("[^0-9]");
        	Ranorex.WebElement qaCtrl = null;
        	Duration timeout = 15000;
        	IList msgListArr = null;
        	string apCtrlStr = string.Format(targStr, StackPortal.ToString());
        	string targStrTmp = string.Empty;
        	bool found = Host.Local.TryFindSingle(apCtrlStr.ToString(), timeout, out qaCtrl);
        	
        	if(found)
        	{
        		
        		//msgListArr = (IList)qaCtrl.Children;
	        	targStrTmp = qaCtrl.ToString();
	        	targStr = rgx.Replace(targStrTmp, ""); 
	        	RequestID = targStr; 
	        	Report.Info(targStr);
        	}
        	else
        	{
        		Report.Info("Can not build string/dialog"); 
        	}
        	
        	
          }
          
          public static void SelectList(string apCtrlStr)
          {
          	string inTest = null; 
          	Ranorex.WebElement sol; 
          	Ranorex.SelectTag box = portalqaRepository.Instance.portal.Preferences.TimezoneSelector;
          	Ranorex.OptionTag timeMountain = portalqaRepository.Instance.portal.Preferences.MountainTime;
          	string tmpStr = string.Empty; 
          	string tmpCtrlStr; 
          	string itemZ; 
          	Duration timeout = 10000;
          	bool found = false; 
          	
          	//ArrayList items = new ArrayList(); 
          	
          	inTest = string.Format(apCtrlStr.ToString(), StackPortal.ToString());
          	sol = inTest; 
          	
          	IList<Ranorex.WebElement>items1 = sol.FindDescendants<Ranorex.WebElement>();

          	//found = Host.Local.TryFindSingle(string.Format(apCtrlStr[0].ToString(), StackPortal.ToString()), out itemZ);
         
          	if (inTest != null)
          	     {
          			
          			items1.Add(inTest);
          	      	found = true; 
          	 	 }
          		
          		if(items1 != null)
          		{
          			
          			    
          					box.Focus();
          					box.Click(); 	
          					timeMountain.Click(); 
          			    	tmpStr = timeMountain.InnerText;
          			    
          		}
          		
          		
          	
          }
          
          public static void FindTextChar(string targStr)
          {
          	Regex rgx = new Regex("[^A-Z]");
        	Ranorex.WebElement qaCtrl = null;
        	Duration timeout = 15000;
        	IList msgListArr = null;
        	string apCtrlStr = string.Format(targStr, StackPortal.ToString());
        	string targStrTmp = string.Empty;
        	bool found = Host.Local.TryFindSingle(apCtrlStr.ToString(), timeout, out qaCtrl);
        	
        	if(found)
        	{
	        	msgListArr = (IList)qaCtrl.Children;
	        	targStrTmp = msgListArr[0].ToString();
	        	targStr = rgx.Replace(targStrTmp, ""); 
	        	Report.Info(targStr);
	        	IList finalTgtSt = null; 
	        	finalTgtSt.Add(targStr); 
	        	//portalqa.formatted.code.utility.TargetString(targStr.ToString());
        	}
        	else
        	{
        		Report.Info("Can not build string/dialog"); 
        	}
        	
          }
          
          
          public static void SetLogOnCriteria(string logOnNameStr, string logOnPasswordStr)
          {
          	var repo = portalqaRepository.Instance;
			UserNameStr = logOnNameStr;
			PasswordStr = logOnPasswordStr;
			
			//Report.Log(ReportLevel.Info, "Keyboard", "(Optional Action)\r\nInvoking PerformClick() on item 'portal.buttons.Worklist'.", new RecordItemIndex(6));
            //Report.Log(ReportLevel.Info, "Invoke Action", "(Optional Action)\r\nInvoking PerformClick() on item 'portalqaRepository.Instance.OC.Username'.", portalqaRepository.Instance.OC.UsernameInfo);
			Delay.Milliseconds(8000);
			//portalqaRepository.Instance.OC2.Username.PressKeys(UserNameStr);
			portalqaRepository.Instance.OCLOGIN.Username.PressKeys(UserNameStr); 
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence 'PasswordStr' with focus on 'OC.password'.", new RecordItemIndex(7));
            portalqaRepository.Instance.OC.password.PressKeys(PasswordStr + "{Return}");
            Delay.Milliseconds(5000);
            
           
     
          }
          
          public static void SetPortalLogOnCriteria(string logOnNameStr, string logOnPasswordStr)
		{
			var repo = portalqaRepository.Instance;
          	UserNameStr = logOnNameStr;
			PasswordStr = logOnPasswordStr;
			
			
			repo.portal.login.username.PressKeys(UserNameStr);
			repo.portal.login.password.PressKeys(PasswordStr); 

			//utility.HandlePop();
			//PortalResultsLogInNamesArr[0] = validUserNameStr;
			
			 
		}
          
          public static void Logins(string logOnNameStr, string logOnPasswordStr)
		{
          	string[] logins = {"/dom[@domain='devvprtweb{0}']//input[#'Content_tbUserName']", "/dom[@domain='devvprtweb{0}']//input[#'Content_tbPassword']"};
          	
          	var repo = portalqaRepository.Instance;
          	UserNameStr = logOnNameStr;
			PasswordStr = logOnPasswordStr;
			
			portalqa.formatted.code.utility.Type(logins[0].ToString());
			//repo.portal.login.username.PressKeys(UserNameStr);
			repo.portal.login.password.PressKeys(PasswordStr); 
			repo.portal.login.SubmitButton.Click();
			
			
			if(repo.passwordpopup.SelfInfo.Exists())
			{
				utility.HandlePop(); 
			}
			
			//portalqa.formatted.code.utility.Type(logins[0].ToString());
			
			//utility.HandlePop();
			//PortalResultsLogInNamesArr[0] = validUserNameStr;
			
			 
		}
          
          public static void HandlePop()
        {
          	var repo = portalqaRepository.Instance;
        	var pop = repo.passwordpopup;
        	//var okay = repo.passwordpopup.okay;
        
        		if(pop.Self.Visible)
        		{
        			string[] apCtrlStrArr = {"/dom[@domain='devvprtweb[0-9]']//input[#'Content_tbCurrentPassword']"};
	        		string[] apCtrlStrArr2 = {"/dom[@domain='devvprtweb[0-9]']//input[#'txtAnswer1']"};
	        		string targInputStr = "virtual1";
	        		string targInputStr2 = "test"; 
        			
        			repo.passwordpopup.okay.Click();
        			
        			repo.portal.login.password.PressKeys("{LControlKey down}{Akey}{LControlKey up}{Delete}");
	        		repo.portal.login.password.PressKeys("virtual1");
	        		repo.portal.login.SubmitButton.Click();
	        		
	        		//repo.portal.login.PasswordPopUpPassword.PressKeys("virtual1");
	        		//repo.portal.login.PasswordPopUp.PressKeys("{tab}virtual1");
	        		//repo.portal.login.PasswordPopUpTab.PressKeys("{tab}virtual1");
	        		repo.portal.login.PasswordPopUpTab.MoveTo();
//	        		portalqa.formatted.code.TestResultsCode.InputStrings(apCtrlStrArr[0].ToString(), targInputStr.ToString());
					Keyboard.Press("{Tab}{Tab}");
					Keyboard.Press("virtual1");
	        		
	        		repo.portal.login.PasswordPopUpNewPassword.PressKeys("password1");
	        		repo.portal.login.PasswordPopUpConfirmPassword.PressKeys("password1");
	        		repo.portal.login.PasswordPopUpSubmit.Click();
	        		
	        		Delay.Duration(3000);
        			
		        		repo.portal.login.email.PressKeys("test@test.com");
	        			repo.portal.login.ConfirmEmail.PressKeys("test@test.com");
	        			Keyboard.Press("{Tab}");
	        			Keyboard.Press("{Down}");
	        			Keyboard.Press("{Tab}");
	        			Keyboard.Press("test");
	        			Keyboard.Press("{Tab}");
	        			Keyboard.Press("{Down}");
	        			Keyboard.Press("{Tab}");
	        			Keyboard.Press("test");
	        			Keyboard.Press("{Tab}");
	        			Keyboard.Press("{Down}");
	        			Keyboard.Press("{Tab}");
	        			Keyboard.Press("test");
	        			
	        			//portalqa.formatted.code.TestResultsCode.InputStrings(targInputStr2.ToString(), apCtrlStrArr2[0].ToString());
	//        			repo.portal.login.question1.PressKeys("test");
	//        			repo.portal.login.question2.PressKeys("test");
	//        			repo.portal.login.question3.PressKeys("test");
	        			repo.portal.login.submit.Click();
	        			repo.portal.login.PasswordPopUpFinalOkay.Click();
	        			Delay.Duration(2000); 
	        		

	        	
        		}
        		
        		else
        		{
        			Report.Success("pass"); 
        		}
        		
        		
        }
          
          public static void Facilitymatch(string apCtrlStr, string facility1, string facility2)
          {
          	string hdrStr = apCtrlStr; 
          	string f1 = facility1; 
          	string f2 = facility2; 
          	 
          	
//          	hdrStr = string.Format(apCtrlStr.ToString(), StackPortal.ToString());
//          	f1 = string.Format(facility1.ToString(), StackPortal.ToString());
//          	f2 = string.Format(facility1.ToString(), StackPortal.ToString());
          	
          	while(hdrStr != null)
          	{
          		if(hdrStr.Contains(f1) && hdrStr.Contains(f2) )
          		{
          			Report.Success("contains both"); 
          			break; 
          		}
          		else
          		{
          			Report.Failure("String is not building, does not contain multiple facilities, or other error.");
          			break; 
          		}
          	}
          		
          	
   
    		}

          
           public static void CentralTimeCompare()
        {
        	
        	 int indexx = -8;
        	 int indexxTmp = 0; 
        	 int offSet = 11;
        	 int offSet2 = 8; 
        	 int maxLoop = 0; 
        	 int multi = indexx + offSet2 - 1; 
        	 int buttonIndexx = 02; 
        	 int butntonCounter = 0; 
        	 int buttonCount = 02; 
        	 int buttonCount1 = 00; 
        	 string buttonCounter = string.Empty;
        	 string buttonCounter1 = string.Empty; 
        	 string found = string.Empty;
        	 string[] textStrArr = {"Created", "Incomplete", "Complete", "Cancelled Without QA"};
        	 string[] textStrArr2 = {};
        	 string[] textStrArr3 = {};
        	 string tmpStr = string.Empty;
        	 string differenceStr = string.Empty; 
        	 string differenceTotStr; 
        	 string dateStr;
        	 string cntrlStr;
        	 string timeArrivedCompare2;
        	 string timeArrivedStr = portalqa.formatted.code.utility.ArrivedCentralTime; 
        	 string timeArrivedCompare = portalqa.formatted.code.utility.ArrivedMountainTime;
        	 string exactTimeZone = portalqaRepository.Instance.portal.WorkList.ExactTimeZone.Element.GetAttributeValueText("InnerText");
        	 ArrayList timeArray = new ArrayList(); 
        	 string[] timeStrArray; 
        	 int differenceTot = 0; 
        	 Ranorex.WebElement details2 = portalqaRepository.Instance.portal.WorkList.details2;
        	 //Ranorex.WebElement close = portalqaRepository.Instance.portal.Order_Details.close2; 
        	 var window = portalqaRepository.Instance.portal; 
        	 var grid = portalqaRepository.Instance.portal.buttons.Column_Headings.rgMasterTable;
        	 //var close2 = portalqaRepository.Instance.portal.Order_Details.close2;
        	 //var editQA = repo.portal.Order_Details.EditQA;
        	 //var viewQA = repo.portal.Order_Details.View;
        	 var date = System.DateTime.Parse("9/18/2012 2:45:44 PM");
        	 var now = System.DateTime.Now;
        	 var difference = now - date; 
        	 //Ranorex.DateTime = now - date; 
        	
	         IList<Ranorex.TrTag> myList = grid.FindDescendants<Ranorex.TrTag>(); 
	         IList<Ranorex.TdTag> myList2 = grid.FindDescendants<Ranorex.TdTag>();
	         
	         portalqa.formatted.testcases.TimeZoneCheck.Instance.CentralTimeAdjust(); 
	
	         maxLoop = (int)(myList2.Count / (offSet));
         		    
	         for (int j = 0; j < maxLoop; j++)
	         {

				indexx += offSet; 
				myList2[indexx].MoveTo();

				        try
				        {
					        buttonIndexx += buttonCount;
					        buttonCounter = buttonIndexx.ToString(); 
	        	 			buttonCounter1 = buttonCounter.PadLeft(2, '0'); 
	        				//buttonCount1 = Convert.ToInt32(buttonCounter1); 
	        				
	        				if(buttonIndexx > 0)
	        				{
	        					 //buttonCounter1 = buttonIndexx.ToString().PadLeft(buttonIndexx, '0');
							        cntrlStr = string.Format("/dom[@domain='devvprtweb{0}']//a[#'ctl00_ctl00_Content_ContentPlaceHolderMain_GridWorklist_ctl00_ctl{1}_DetailsBtn']/img[@title='Details']", StackPortal.ToString(), buttonCounter1.ToString()); 
			
							        Ranorex.Mouse.Click(cntrlStr);
							        Ranorex.Delay.Milliseconds(3000); 
							        timeArrivedCompare2 = portalqaRepository.Instance.portal.Order_Details.TimeArrived.Element.GetAttributeValueText("InnerText");
							        timeArray.Add(timeArrivedCompare2); 
							        CentralTimeArray = timeArray; 
							       	
//							        portalqa.formatted.testcases.TimeZoneCheck.Instance.setMountainTime(); 
//							        portalqa.formatted.testcases.TimeZoneCheck.Instance.DateCentral(); 
							        //timeArrivedCompare = portalqaRepository.Instance.portal.Order_Details.TimeArrived.Element.GetAttributeValueText("InnerText");
							        portalqaRepository.Instance.portal.Order_Details.close2.Click();
							    
	        				}
				           
				        }
				        catch(Exception e)
				        {
				        	Report.Info("count is off"); 
				        }
				        
				         }}
           
            public static void MountainTimeCompare()
       	    {
        	
        	 int indexx = -8;
        	 int indexxTmp = 0; 
        	 int offSet = 11;
        	 int offSet2 = 8; 
        	 int maxLoop = 0; 
        	 int multi = indexx + offSet2 - 1; 
        	 int buttonIndexx = 02; 
        	 int butntonCounter = 0; 
        	 int buttonCount = 02; 
        	 int buttonCount1 = 00; 
        	 string buttonCounter = string.Empty;
        	 string buttonCounter1 = string.Empty; 
        	 string found = string.Empty;
        	 string[] textStrArr = {"Created", "Incomplete", "Complete", "Cancelled Without QA"};
        	 string[] textStrArr2 = {};
        	 string[] textStrArr3 = {};
        	 string tmpStr = string.Empty;
        	 string differenceStr = string.Empty; 
        	 string differenceTotStr; 
        	 string dateStr;
        	 string cntrlStr;
        	 string timeArrivedCompare2;
        	 string timeArrivedStr = portalqa.formatted.code.utility.ArrivedCentralTime; 
        	 string timeArrivedCompare = portalqa.formatted.code.utility.ArrivedMountainTime;
        	 string exactTimeZone = portalqaRepository.Instance.portal.WorkList.ExactTimeZone.Element.GetAttributeValueText("InnerText");
        	 ArrayList timeArray = new ArrayList(); 
        	 string[] timeStrArray; 
        	 int differenceTot = 0; 
        	 Ranorex.WebElement details2 = portalqaRepository.Instance.portal.WorkList.details2;
        	 //Ranorex.WebElement close = portalqaRepository.Instance.portal.Order_Details.close2; 
        	 var window = portalqaRepository.Instance.portal; 
        	 var grid = portalqaRepository.Instance.portal.buttons.Column_Headings.rgMasterTable;
        	 //var close2 = portalqaRepository.Instance.portal.Order_Details.close2;
        	 //var editQA = repo.portal.Order_Details.EditQA;
        	 //var viewQA = repo.portal.Order_Details.View;
        	 var date = System.DateTime.Parse("9/18/2012 2:45:44 PM");
        	 var now = System.DateTime.Now;
        	 var difference = now - date; 
        	 //Ranorex.DateTime = now - date; 
        	
	         IList<Ranorex.TrTag> myList = grid.FindDescendants<Ranorex.TrTag>(); 
	         IList<Ranorex.TdTag> myList2 = grid.FindDescendants<Ranorex.TdTag>();
	         
	         portalqa.formatted.testcases.TimeZoneCheck.Instance.MountainTimeAdjust(); 
	
	         maxLoop = (int)(myList2.Count / (offSet));
         		    
	         for (int j = 0; j < maxLoop; j++)
	         {

				indexx += offSet; 
				myList2[indexx].MoveTo();

				        try
				        {
					        buttonIndexx += buttonCount;
					        buttonCounter = buttonIndexx.ToString(); 
	        	 			buttonCounter1 = buttonCounter.PadLeft(2, '0'); 
	        				//buttonCount1 = Convert.ToInt32(buttonCounter1); 
	        				
	        				if(buttonIndexx > 0)
	        				{
	        					 //buttonCounter1 = buttonIndexx.ToString().PadLeft(buttonIndexx, '0');
							        cntrlStr = string.Format("/dom[@domain='devvprtweb{0}']//a[#'ctl00_ctl00_Content_ContentPlaceHolderMain_GridWorklist_ctl00_ctl{1}_DetailsBtn']/img[@title='Details']", StackPortal.ToString(), buttonCounter1.ToString()); 
			
							        Ranorex.Mouse.Click(cntrlStr);
							        Ranorex.Delay.Milliseconds(3000); 
							        timeArrivedCompare2 = portalqaRepository.Instance.portal.Order_Details.TimeArrived.Element.GetAttributeValueText("InnerText");
							        timeArray.Add(timeArrivedCompare2); 
							        MountainTimeArray = timeArray; 
							       	
//							        portalqa.formatted.testcases.TimeZoneCheck.Instance.setMountainTime(); 
//							        portalqa.formatted.testcases.TimeZoneCheck.Instance.DateCentral(); 
							        //timeArrivedCompare = portalqaRepository.Instance.portal.Order_Details.TimeArrived.Element.GetAttributeValueText("InnerText");
							        portalqaRepository.Instance.portal.Order_Details.close2.Click();
							    
	        				}
				           
				        }
				        catch(Exception e)
				        {
				        	Report.Info("count is off"); 
				        }
				        
				         }}
				        
        public static void CentralTimeQACreatedCompare()
        {
        	
        	 int indexx = -8;
        	 int indexxTmp = 0; 
        	 int offSet = 11;
        	 int offSet2 = 8; 
        	 int maxLoop = 0; 
        	 int multi = indexx + offSet2 - 1; 
        	 int buttonIndexx = 02; 
        	 int butntonCounter = 0; 
        	 int buttonCount = 02; 
        	 int buttonCount1 = 00; 
        	 string buttonCounter = string.Empty;
        	 string buttonCounter1 = string.Empty; 
        	 string found = string.Empty;
        	 string[] textStrArr = {"Created", "Incomplete", "Complete", "Cancelled Without QA"};
        	 string[] textStrArr2 = {};
        	 string[] textStrArr3 = {};
        	 string tmpStr = string.Empty;
        	 string differenceStr = string.Empty; 
        	 string differenceTotStr; 
        	 string dateStr;
        	 string cntrlStr;
        	 string qaCreatedDate;
        	 string timeArrivedStr = portalqa.formatted.code.utility.ArrivedCentralTime; 
        	 string timeArrivedCompare = portalqa.formatted.code.utility.ArrivedMountainTime;
        	 string exactTimeZone = portalqaRepository.Instance.portal.WorkList.ExactTimeZone.Element.GetAttributeValueText("InnerText");
        	 ArrayList timeArray = new ArrayList(); 
        	 string[] timeStrArray; 
        	 int differenceTot = 0; 
        	 Ranorex.WebElement details2 = portalqaRepository.Instance.portal.WorkList.details2;
        	 //Ranorex.WebElement close = portalqaRepository.Instance.portal.Order_Details.close2; 
        	 var window = portalqaRepository.Instance.portal; 
        	 var grid = portalqaRepository.Instance.portal.buttons.Column_Headings.rgMasterTable;
        	 //var close2 = portalqaRepository.Instance.portal.Order_Details.close2;
        	 //var editQA = repo.portal.Order_Details.EditQA;
        	 //var viewQA = repo.portal.Order_Details.View;
        	 var date = System.DateTime.Parse("9/18/2012 2:45:44 PM");
        	 var now = System.DateTime.Now;
        	 var difference = now - date; 
        	 //Ranorex.DateTime = now - date; 
        	
	         IList<Ranorex.TrTag> myList = grid.FindDescendants<Ranorex.TrTag>(); 
	         IList<Ranorex.TdTag> myList2 = grid.FindDescendants<Ranorex.TdTag>();
	         
	         portalqa.formatted.testcases.TimeZoneCheck.Instance.CentralTimeAdjust(); 
	
	         maxLoop = (int)(myList2.Count / (offSet));
         		    
	         for (int j = 0; j < maxLoop; j++)
	         {

				indexx += offSet; 
				myList2[indexx].MoveTo();

				        try
				        {
					        buttonIndexx += buttonCount;
					        buttonCounter = buttonIndexx.ToString(); 
	        	 			buttonCounter1 = buttonCounter.PadLeft(2, '0'); 
	        				//buttonCount1 = Convert.ToInt32(buttonCounter1); 
	        				
	        				if(buttonIndexx > 0)
	        				{
	        					 //buttonCounter1 = buttonIndexx.ToString().PadLeft(buttonIndexx, '0');
							        cntrlStr = string.Format("/dom[@domain='devvprtweb{0}']//a[#'ctl00_ctl00_Content_ContentPlaceHolderMain_GridWorklist_ctl00_ctl{1}_DetailsBtn']/img[@title='Details']", StackPortal.ToString(), buttonCounter1.ToString()); 
			
							        Ranorex.Mouse.Click(cntrlStr);
							        Ranorex.Delay.Milliseconds(3000); 
							        qaCreatedDate = portalqaRepository.Instance.portal.Order_Details.QACreatedDate.Element.GetAttributeValueText("InnerText");
							        timeArray.Add(qaCreatedDate); 
							        CentralTimeArray = timeArray; 
							       	
//							        portalqa.formatted.testcases.TimeZoneCheck.Instance.setMountainTime(); 
//							        portalqa.formatted.testcases.TimeZoneCheck.Instance.DateCentral(); 
							        //timeArrivedCompare = portalqaRepository.Instance.portal.Order_Details.TimeArrived.Element.GetAttributeValueText("InnerText");
							        portalqaRepository.Instance.portal.Order_Details.close2.Click();
							    
	        				}
				           
				        }
				        catch(Exception e)
				        {
				        	Report.Info("count is off"); 
				        }
				        
				         }}
            
            public static void MountainTimeQACreatedCompare()
        {
        	
        	 int indexx = -8;
        	 int indexxTmp = 0; 
        	 int offSet = 11;
        	 int offSet2 = 8; 
        	 int maxLoop = 0; 
        	 int multi = indexx + offSet2 - 1; 
        	 int buttonIndexx = 02; 
        	 int butntonCounter = 0; 
        	 int buttonCount = 02; 
        	 int buttonCount1 = 00; 
        	 string buttonCounter = string.Empty;
        	 string buttonCounter1 = string.Empty; 
        	 string found = string.Empty;
        	 string[] textStrArr = {"Created", "Incomplete", "Complete", "Cancelled Without QA"};
        	 string[] textStrArr2 = {};
        	 string[] textStrArr3 = {};
        	 string tmpStr = string.Empty;
        	 string differenceStr = string.Empty; 
        	 string differenceTotStr; 
        	 string dateStr;
        	 string cntrlStr;
        	 string qaCreatedDate;
        	 string timeArrivedStr = portalqa.formatted.code.utility.ArrivedCentralTime; 
        	 string timeArrivedCompare = portalqa.formatted.code.utility.ArrivedMountainTime;
        	 string exactTimeZone = portalqaRepository.Instance.portal.WorkList.ExactTimeZone.Element.GetAttributeValueText("InnerText");
        	 ArrayList timeArray = new ArrayList(); 
        	 string[] timeStrArray; 
        	 int differenceTot = 0; 
        	 Ranorex.WebElement details2 = portalqaRepository.Instance.portal.WorkList.details2;
        	 //Ranorex.WebElement close = portalqaRepository.Instance.portal.Order_Details.close2; 
        	 var window = portalqaRepository.Instance.portal; 
        	 var grid = portalqaRepository.Instance.portal.buttons.Column_Headings.rgMasterTable;
        	 //var close2 = portalqaRepository.Instance.portal.Order_Details.close2;
        	 //var editQA = repo.portal.Order_Details.EditQA;
        	 //var viewQA = repo.portal.Order_Details.View;
        	 var date = System.DateTime.Parse("9/18/2012 2:45:44 PM");
        	 var now = System.DateTime.Now;
        	 var difference = now - date; 
        	 //Ranorex.DateTime = now - date; 
        	
	         IList<Ranorex.TrTag> myList = grid.FindDescendants<Ranorex.TrTag>(); 
	         IList<Ranorex.TdTag> myList2 = grid.FindDescendants<Ranorex.TdTag>();
	         
	         portalqa.formatted.testcases.TimeZoneCheck.Instance.MountainTimeAdjust(); 
	
	         maxLoop = (int)(myList2.Count / (offSet));
         		    
	         for (int j = 0; j < maxLoop; j++)
	         {

				indexx += offSet; 
				myList2[indexx].MoveTo();

				        try
				        {
					        buttonIndexx += buttonCount;
					        buttonCounter = buttonIndexx.ToString(); 
	        	 			buttonCounter1 = buttonCounter.PadLeft(2, '0'); 
	        				//buttonCount1 = Convert.ToInt32(buttonCounter1); 
	        				
	        				if(buttonIndexx > 0)
	        				{
	        					 //buttonCounter1 = buttonIndexx.ToString().PadLeft(buttonIndexx, '0');
							        cntrlStr = string.Format("/dom[@domain='devvprtweb{0}']//a[#'ctl00_ctl00_Content_ContentPlaceHolderMain_GridWorklist_ctl00_ctl{1}_DetailsBtn']/img[@title='Details']", StackPortal.ToString(), buttonCounter1.ToString()); 
			
							        Ranorex.Mouse.Click(cntrlStr);
							        Ranorex.Delay.Milliseconds(3000); 
							        qaCreatedDate = portalqaRepository.Instance.portal.Order_Details.QACreatedDate.Element.GetAttributeValueText("InnerText");
							        timeArray.Add(qaCreatedDate); 
							        MountainTimeArray = timeArray; 
							       	
//							        portalqa.formatted.testcases.TimeZoneCheck.Instance.setMountainTime(); 
//							        portalqa.formatted.testcases.TimeZoneCheck.Instance.DateCentral(); 
							        //timeArrivedCompare = portalqaRepository.Instance.portal.Order_Details.TimeArrived.Element.GetAttributeValueText("InnerText");
							        portalqaRepository.Instance.portal.Order_Details.close2.Click();
							    
	        				}
				           
				        }
				        catch(Exception e)
				        {
				        	Report.Info("count is off"); 
				        }
				        
				         }}
	         
        public static void CentralTimeQAResolvedCompare()
        {
        	
        	 int indexx = -8;
        	 int indexxTmp = 0; 
        	 int offSet = 11;
        	 int offSet2 = 8; 
        	 int maxLoop = 0; 
        	 int multi = indexx + offSet2 - 1; 
        	 int buttonIndexx = 02; 
        	 int butntonCounter = 0; 
        	 int buttonCount = 02; 
        	 int buttonCount1 = 00; 
        	 string buttonCounter = string.Empty;
        	 string buttonCounter1 = string.Empty; 
        	 string found = string.Empty;
        	 string[] textStrArr = {"Created", "Incomplete", "Complete", "Cancelled Without QA"};
        	 string[] textStrArr2 = {};
        	 string[] textStrArr3 = {};
        	 string tmpStr = string.Empty;
        	 string differenceStr = string.Empty; 
        	 string differenceTotStr; 
        	 string dateStr;
        	 string cntrlStr;
        	 string qaResolvedDate;
        	 string timeArrivedStr = portalqa.formatted.code.utility.ArrivedCentralTime; 
        	 string timeArrivedCompare = portalqa.formatted.code.utility.ArrivedMountainTime;
        	 string exactTimeZone = portalqaRepository.Instance.portal.WorkList.ExactTimeZone.Element.GetAttributeValueText("InnerText");
        	 ArrayList timeArray = new ArrayList(); 
        	 string[] timeStrArray; 
        	 int differenceTot = 0; 
        	 Ranorex.WebElement details2 = portalqaRepository.Instance.portal.WorkList.details2;
        	 //Ranorex.WebElement close = portalqaRepository.Instance.portal.Order_Details.close2; 
        	 var window = portalqaRepository.Instance.portal; 
        	 var grid = portalqaRepository.Instance.portal.buttons.Column_Headings.rgMasterTable;
        	 //var close2 = portalqaRepository.Instance.portal.Order_Details.close2;
        	 //var editQA = repo.portal.Order_Details.EditQA;
        	 //var viewQA = repo.portal.Order_Details.View;
        	 var date = System.DateTime.Parse("9/18/2012 2:45:44 PM");
        	 var now = System.DateTime.Now;
        	 var difference = now - date; 
        	 //Ranorex.DateTime = now - date; 
        	
	         IList<Ranorex.TrTag> myList = grid.FindDescendants<Ranorex.TrTag>(); 
	         IList<Ranorex.TdTag> myList2 = grid.FindDescendants<Ranorex.TdTag>();
	         
	         portalqa.formatted.testcases.TimeZoneCheck.Instance.CentralTimeAdjust(); 
	
	         maxLoop = (int)(myList2.Count / (offSet));
         		    
	         for (int j = 0; j < maxLoop; j++)
	         {

				indexx += offSet; 
				myList2[indexx].MoveTo();

				        try
				        {
					        buttonIndexx += buttonCount;
					        buttonCounter = buttonIndexx.ToString(); 
	        	 			buttonCounter1 = buttonCounter.PadLeft(2, '0'); 
	        				//buttonCount1 = Convert.ToInt32(buttonCounter1); 
	        				
	        				if(buttonIndexx > 0)
	        				{
	        					 //buttonCounter1 = buttonIndexx.ToString().PadLeft(buttonIndexx, '0');
							        cntrlStr = string.Format("/dom[@domain='devvprtweb{0}']//a[#'ctl00_ctl00_Content_ContentPlaceHolderMain_GridWorklist_ctl00_ctl{1}_DetailsBtn']/img[@title='Details']", StackPortal.ToString(), buttonCounter1.ToString()); 
			
							        Ranorex.Mouse.Click(cntrlStr);
							        Ranorex.Delay.Milliseconds(3000); 
							        qaResolvedDate = portalqaRepository.Instance.portal.Order_Details.QAResolved.Element.GetAttributeValueText("InnerText");
							        timeArray.Add(qaResolvedDate); 
							        CentralTimeArray = timeArray; 
							       	
//							        portalqa.formatted.testcases.TimeZoneCheck.Instance.setMountainTime(); 
//							        portalqa.formatted.testcases.TimeZoneCheck.Instance.DateCentral(); 
							        //timeArrivedCompare = portalqaRepository.Instance.portal.Order_Details.TimeArrived.Element.GetAttributeValueText("InnerText");
							        portalqaRepository.Instance.portal.Order_Details.close2.Click();
							    
	        				}
				           
				        }
				        catch(Exception e)
				        {
				        	Report.Info("count is off"); 
				        }
				        
				         }}
        	
        	
    
				
             
               public static void MountainTimeQAResolvedCompare()
        {
        	
        	 int indexx = -8;
        	 int indexxTmp = 0; 
        	 int offSet = 11;
        	 int offSet2 = 8; 
        	 int maxLoop = 0; 
        	 int multi = indexx + offSet2 - 1; 
        	 int buttonIndexx = 02; 
        	 int butntonCounter = 0; 
        	 int buttonCount = 02; 
        	 int buttonCount1 = 00; 
        	 string buttonCounter = string.Empty;
        	 string buttonCounter1 = string.Empty; 
        	 string found = string.Empty;
        	 string[] textStrArr = {"Created", "Incomplete", "Complete", "Cancelled Without QA"};
        	 string[] textStrArr2 = {};
        	 string[] textStrArr3 = {};
        	 string tmpStr = string.Empty;
        	 string differenceStr = string.Empty; 
        	 string differenceTotStr; 
        	 string dateStr;
        	 string cntrlStr;
        	 string qaResolvedDate;
        	 string timeArrivedStr = portalqa.formatted.code.utility.ArrivedCentralTime; 
        	 string timeArrivedCompare = portalqa.formatted.code.utility.ArrivedMountainTime;
        	 string exactTimeZone = portalqaRepository.Instance.portal.WorkList.ExactTimeZone.Element.GetAttributeValueText("InnerText");
        	 ArrayList timeArray = new ArrayList(); 
        	 string[] timeStrArray; 
        	 int differenceTot = 0; 
        	 Ranorex.WebElement details2 = portalqaRepository.Instance.portal.WorkList.details2;
        	 //Ranorex.WebElement close = portalqaRepository.Instance.portal.Order_Details.close2; 
        	 var window = portalqaRepository.Instance.portal; 
        	 var grid = portalqaRepository.Instance.portal.buttons.Column_Headings.rgMasterTable;
        	 //var close2 = portalqaRepository.Instance.portal.Order_Details.close2;
        	 //var editQA = repo.portal.Order_Details.EditQA;
        	 //var viewQA = repo.portal.Order_Details.View;
        	 var date = System.DateTime.Parse("9/18/2012 2:45:44 PM");
        	 var now = System.DateTime.Now;
        	 var difference = now - date; 
        	 //Ranorex.DateTime = now - date; 
        	
	         IList<Ranorex.TrTag> myList = grid.FindDescendants<Ranorex.TrTag>(); 
	         IList<Ranorex.TdTag> myList2 = grid.FindDescendants<Ranorex.TdTag>();
	         
	         portalqa.formatted.testcases.TimeZoneCheck.Instance.MountainTimeAdjust();
	
	         maxLoop = (int)(myList2.Count / (offSet));
         		    
	         for (int j = 0; j < maxLoop; j++)
	         {

				indexx += offSet; 
				myList2[indexx].MoveTo();

				        try
				        {
					        buttonIndexx += buttonCount;
					        buttonCounter = buttonIndexx.ToString(); 
	        	 			buttonCounter1 = buttonCounter.PadLeft(2, '0'); 
	        				//buttonCount1 = Convert.ToInt32(buttonCounter1); 
	        				
	        				if(buttonIndexx > 0)
	        				{
	        					 //buttonCounter1 = buttonIndexx.ToString().PadLeft(buttonIndexx, '0');
							        cntrlStr = string.Format("/dom[@domain='devvprtweb{0}']//a[#'ctl00_ctl00_Content_ContentPlaceHolderMain_GridWorklist_ctl00_ctl{1}_DetailsBtn']/img[@title='Details']", StackPortal.ToString(), buttonCounter1.ToString()); 
			
							        Ranorex.Mouse.Click(cntrlStr);
							        Ranorex.Delay.Milliseconds(3000); 
							        qaResolvedDate = portalqaRepository.Instance.portal.Order_Details.QAResolved.Element.GetAttributeValueText("InnerText");
							        timeArray.Add(qaResolvedDate); 
							        MountainTimeArray = timeArray; 
							       	
//							        portalqa.formatted.testcases.TimeZoneCheck.Instance.setMountainTime(); 
//							        portalqa.formatted.testcases.TimeZoneCheck.Instance.DateCentral(); 
							        //timeArrivedCompare = portalqaRepository.Instance.portal.Order_Details.TimeArrived.Element.GetAttributeValueText("InnerText");
							        portalqaRepository.Instance.portal.Order_Details.close2.Click();
							    
	        				}
				           
				        }
				        catch(Exception e)
				        {
				        	Report.Info("count is off"); 
				        }
				        
				         }}
	    public static void CentralTimeAttachCompareLong()
        {
        	
        	 int indexx = -8;
        	 int indexxTmp = 0; 
        	 int offSet = 11;
        	 int offSet2 = 8; 
        	 int maxLoop = 0; 
        	 int multi = indexx + offSet2 - 1; 
        	 int buttonIndexx = 02; 
        	 int butntonCounter = 0; 
        	 int buttonCount = 02; 
        	 int buttonCount1 = 00; 
        	 string buttonCounter = string.Empty;
        	 string buttonCounter1 = string.Empty; 
        	 string found = string.Empty;
        	 string[] textStrArr = {"Created", "Incomplete", "Complete", "Cancelled Without QA"};
        	 string[] textStrArr2 = {};
        	 string[] textStrArr3 = {};
        	 string tmpStr = string.Empty;
        	 string differenceStr = string.Empty; 
        	 string differenceTotStr; 
        	 string dateStr;
        	 string cntrlStr;
        	 string dateAttached;
        	 string timeArrivedStr = portalqa.formatted.code.utility.ArrivedCentralTime; 
        	 string timeArrivedCompare = portalqa.formatted.code.utility.ArrivedMountainTime;
        	 string exactTimeZone = portalqaRepository.Instance.portal.WorkList.ExactTimeZone.Element.GetAttributeValueText("InnerText");
        	 ArrayList timeArray = new ArrayList(); 
        	 string[] timeStrArray; 
        	 int differenceTot = 0; 
        	 Ranorex.WebElement details2 = portalqaRepository.Instance.portal.WorkList.details2;
        	 //Ranorex.WebElement close = portalqaRepository.Instance.portal.Order_Details.close2; 
        	 var window = portalqaRepository.Instance.portal; 
        	 var grid = portalqaRepository.Instance.portal.buttons.Column_Headings.rgMasterTable;
        	 //var close2 = portalqaRepository.Instance.portal.Order_Details.close2;
        	 //var editQA = repo.portal.Order_Details.EditQA;
        	 //var viewQA = repo.portal.Order_Details.View;
        	 var date = System.DateTime.Parse("9/18/2012 2:45:44 PM");
        	 var now = System.DateTime.Now;
        	 var difference = now - date; 
        	 //Ranorex.DateTime = now - date; 
        	
	         IList<Ranorex.TrTag> myList = grid.FindDescendants<Ranorex.TrTag>(); 
	         IList<Ranorex.TdTag> myList2 = grid.FindDescendants<Ranorex.TdTag>();
	         
	         portalqa.formatted.testcases.TimeZoneCheck.Instance.CentralTimeAdjust(); 
	
	         maxLoop = (int)(myList2.Count / (offSet));
         		    
	         for (int j = 0; j < maxLoop; j++)
	         {

				indexx += offSet; 
				myList2[indexx].MoveTo();

				        try
				        {
					        buttonIndexx += buttonCount;
					        buttonCounter = buttonIndexx.ToString(); 
	        	 			buttonCounter1 = buttonCounter.PadLeft(2, '0'); 
	        				//buttonCount1 = Convert.ToInt32(buttonCounter1); 
	        				
	        				if(buttonIndexx > 0)
	        				{
	        					 //buttonCounter1 = buttonIndexx.ToString().PadLeft(buttonIndexx, '0');
							        cntrlStr = string.Format("/dom[@domain='devvprtweb{0}']//a[#'ctl00_ctl00_Content_ContentPlaceHolderMain_GridWorklist_ctl00_ctl{1}_DetailsBtn']/img[@title='Details']", StackPortal.ToString(), buttonCounter1.ToString()); 
			
							        Ranorex.Mouse.Click(cntrlStr);
							        Ranorex.Delay.Milliseconds(3000); 
							        dateAttached = portalqaRepository.Instance.portal.Order_Details.DateAttached.Element.GetAttributeValueText("InnerText");
							        if(dateAttached == null)
							        {
							        	break; 
							        }
							        else
							        {
							        timeArray.Add(dateAttached); 
							        CentralTimeArray = timeArray; 
							       	
//							        portalqa.formatted.testcases.TimeZoneCheck.Instance.setMountainTime(); 
//							        portalqa.formatted.testcases.TimeZoneCheck.Instance.DateCentral(); 
							        //timeArrivedCompare = portalqaRepository.Instance.portal.Order_Details.TimeArrived.Element.GetAttributeValueText("InnerText");
							        portalqaRepository.Instance.portal.Order_Details.close2.Click();
							        }
	        				}
				           
				        }
				        catch(Exception e)
				        {
				        	Report.Info("count is off"); 
				        }
						
				        
				         }}
	    
	     public static void CentralTimeAttachCompare()
        {
        	
        	 int indexx = -8;
        	 int offSet = 11;
        	 int offSet2 = 8; 
        	 int maxLoop = 0; 
        	 int multi = indexx + offSet2 - 1; 
        	 int buttonIndexx = 02; 
        	 int buttonCount = 02; 
        	 string buttonCounter = string.Empty;
        	 string buttonCounter1 = string.Empty; 
        	 string found = string.Empty;
        	 string[] textStrArr = {"Created", "Incomplete", "Complete", "Cancelled Without QA"};
        	 string[] textStrArr2 = {};
        	 string[] textStrArr3 = {};
        	 string tmpStr = string.Empty;
        	 string differenceStr = string.Empty; 
        	 string dateAttached; 
        	 string cntrlStr;
        	 string timeArrivedStr = portalqa.formatted.code.utility.ArrivedCentralTime; 
        	 string timeArrivedCompare = portalqa.formatted.code.utility.ArrivedMountainTime;
        	 string exactTimeZone = portalqaRepository.Instance.portal.WorkList.ExactTimeZone.Element.GetAttributeValueText("InnerText");
        	 ArrayList timeArray = new ArrayList(); 
        	 Ranorex.WebDocument foundPage = portalqaRepository.Instance.portal.Self;
        	 //bool found = portalqaRepository.Instance.portal.Order_Details.AttachmentsZero;
        	 bool lowerLevelFlag = false; 
        	 Ranorex.WebElement details2 = portalqaRepository.Instance.portal.WorkList.details2;
        	 //Ranorex.WebElement close = portalqaRepository.Instance.portal.Order_Details.close2; 
        	 Ranorex.TdTag isAttached = null; 
        	 Duration timeout = 3000; 
        	 var window = portalqaRepository.Instance.portal;
        	 var grid = portalqaRepository.Instance.portal.buttons.Column_Headings.rgMasterTable;
        	 //var close2 = portalqaRepository.Instance.portal.Order_Details.close2;
        	 //var editQA = repo.portal.Order_Details.EditQA;
        	 //var viewQA = repo.portal.Order_Details.View;
        	 var date = System.DateTime.Parse("9/18/2012 2:45:44 PM");
        	 var now = System.DateTime.Now;
        	 var difference = now - date; 
        	 //Ranorex.DateTime = now - date; 
        	
	         IList<Ranorex.TrTag> myList = grid.FindDescendants<Ranorex.TrTag>(); 
	         IList<Ranorex.TdTag> myList2 = grid.FindDescendants<Ranorex.TdTag>();
	         
	         portalqa.formatted.testcases.TimeZoneCheck.Instance.CentralTimeAdjust(); 
	         
	         maxLoop = (int)(myList2.Count / (offSet));
         		    
	         for (int j = 1; j < maxLoop; j ++)
	         {

				indexx += offSet; 
				myList2[indexx].MoveTo();

					    try
				        {
					        buttonIndexx += buttonCount;
					        
					        if(buttonIndexx < 10)
					        {
					        	buttonCounter = buttonIndexx.ToString(); 
	        	 				buttonCounter1 = buttonCounter.PadLeft(2, '0'); 
					        }
					        
					        if(buttonIndexx >= 10)
					        {
					        	buttonCounter = buttonIndexx.ToString(); 
	        	 				buttonCounter1 = buttonCounter; 
					        }
					        
	        				
	        				if(buttonIndexx > 0)
	        				{
	        					lowerLevelFlag = true; 
	        				}
				           
				        }
				        catch(Exception e)
				        {
				        	Report.Info("count is off"); 
				        }
				        
				        if(lowerLevelFlag)
				        {
				        	
							cntrlStr = string.Format("/dom[@domain~'devvprtweb{0}']//a[#'ctl00_ctl00_Content_ContentPlaceHolderMain_GridWorklist_ctl00_ctl{1}_DetailsBtn']/img[@title='Details']", StackPortal.ToString(), buttonCounter1.ToString()); 
							Ranorex.Keyboard.Press("{Down}{Down}{Down}{Down}"); 
							Ranorex.Mouse.Click(cntrlStr);
							Ranorex.Delay.Milliseconds(3000); 
							Host.Local.TryFindSingle(string.Format("/dom[@domain~'devvprtweb{0}']//div[#'RadWindowWrapper_ctl00_ctl00_OrderDetails']/table/tbody/tr[2]/td[2]/iframe//tr[#'ctl00_ctl00_Content_ContentPlaceHolderMain_ManageAttachmentsCtrl_gridAttachments_ctl00__0']/td[4]".ToString(), StackPortal.ToString()), timeout, out isAttached);
							   
							if(isAttached != null)
							{
								dateAttached = portalqaRepository.Instance.portal.Order_Details.DateAttached.Element.GetAttributeValueText("InnerText");
								timeArray.Add(dateAttached); 
								CentralTimeArray = timeArray; 
								portalqaRepository.Instance.portal.Order_Details.close2.Click();
							}
							        
							else
							{
								portalqaRepository.Instance.portal.Order_Details.close2.Click();
							}
							        
				        }
				        
					    }}
	     
	     public static void CentralTimeFaxCompare()
        {
        	
        	 int indexx = -8;
        	 int offSet = 11;
        	 int offSet2 = 8; 
        	 int maxLoop = 0; 
        	 int multi = indexx + offSet2 - 1; 
        	 int buttonIndexx = 02; 
        	 int buttonCount = 02; 
        	 string buttonCounter = string.Empty;
        	 string buttonCounter1 = string.Empty; 
        	 string found = string.Empty;
        	 string[] textStrArr = {"Created", "Incomplete", "Complete", "Cancelled Without QA"};
        	 string[] textStrArr2 = {};
        	 string[] textStrArr3 = {};
        	 string tmpStr = string.Empty;
        	 string differenceStr = string.Empty; 
        	 string dateReceived; 
        	 string cntrlStr;
        	 string timeArrivedStr = portalqa.formatted.code.utility.ArrivedCentralTime; 
        	 string timeArrivedCompare = portalqa.formatted.code.utility.ArrivedMountainTime;
        	 string exactTimeZone = portalqaRepository.Instance.portal.WorkList.ExactTimeZone.Element.GetAttributeValueText("InnerText");
        	 ArrayList timeArray = new ArrayList(); 
        	 Ranorex.WebDocument foundPage = portalqaRepository.Instance.portal.Self;
        	 //bool found = portalqaRepository.Instance.portal.Order_Details.AttachmentsZero;
        	 bool lowerLevelFlag = false; 
        	 Ranorex.WebElement details2 = portalqaRepository.Instance.portal.WorkList.details2;
        	 //Ranorex.WebElement close = portalqaRepository.Instance.portal.Order_Details.close2; 
        	 Ranorex.TdTag isAttached = null; 
        	 Duration timeout = 3000; 
        	 var window = portalqaRepository.Instance.portal;
        	 var grid = portalqaRepository.Instance.portal.buttons.Column_Headings.rgMasterTable;
        	 //var close2 = portalqaRepository.Instance.portal.Order_Details.close2;
        	 //var editQA = repo.portal.Order_Details.EditQA;
        	 //var viewQA = repo.portal.Order_Details.View;
        	 var date = System.DateTime.Parse("9/18/2012 2:45:44 PM");
        	 var now = System.DateTime.Now;
        	 var difference = now - date; 
        	 //Ranorex.DateTime = now - date; 
        	
	         IList<Ranorex.TrTag> myList = grid.FindDescendants<Ranorex.TrTag>(); 
	         IList<Ranorex.TdTag> myList2 = grid.FindDescendants<Ranorex.TdTag>();
	         
	         portalqa.formatted.testcases.TimeZoneCheck.Instance.CentralTimeAdjust(); 
	         
	         maxLoop = (int)(myList2.Count / (offSet));
         		    
	         for (int j = 1; j < maxLoop; j ++)
	         {

				indexx += offSet; 
				myList2[indexx].MoveTo();

					    try
				        {
					        buttonIndexx += buttonCount;
					        
					        if(buttonIndexx < 10)
					        {
					        	buttonCounter = buttonIndexx.ToString(); 
	        	 				buttonCounter1 = buttonCounter.PadLeft(2, '0'); 
					        }
					        
					        if(buttonIndexx >= 10)
					        {
					        	buttonCounter = buttonIndexx.ToString(); 
	        	 				buttonCounter1 = buttonCounter; 
					        }
					        
	        				
	        				if(buttonIndexx > 0)
	        				{
	        					lowerLevelFlag = true; 
	        				}
				           
				        }
				        catch(Exception e)
				        {
				        	Report.Info("count is off"); 
				        }
				        
				        if(lowerLevelFlag)
				        {
				        	
							cntrlStr = string.Format("/dom[@domain~'devvprtweb{0}']//a[#'ctl00_ctl00_Content_ContentPlaceHolderMain_GridWorklist_ctl00_ctl{1}_DetailsBtn']/img[@title='Details']", StackPortal.ToString(), buttonCounter1.ToString()); 
							Ranorex.Keyboard.Press("{Down}{Down}{Down}{Down}"); 
							Ranorex.Mouse.Click(cntrlStr);
							Ranorex.Delay.Milliseconds(1000); 
							Ranorex.Keyboard.Press("{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}"); 
							portalqaRepository.Instance.portal.Order_Details.ManageAttachments.PressKeys("{Tab}{Return}");
							//portalqaRepository.Instance.portal.Order_Details.Faxes.Click(); 
							Host.Local.TryFindSingle(string.Format("/dom[@domain~'devvprtweb{0}']//div[#'RadWindowWrapper_ctl00_ctl00_OrderDetails']/table/tbody/tr[2]/td[2]/iframe//tr[#'ctl00_ctl00_Content_ContentPlaceHolderMain_ManageAttachmentsCtrl_gridFaxes_ctl00__0']/td[@innertext~'$']".ToString(), StackPortal.ToString()), timeout, out isAttached);
							   
							if(isAttached != null)
							{
								dateReceived = portalqaRepository.Instance.portal.Order_Details.DateReceived.Element.GetAttributeValueText("InnerText");
								timeArray.Add(dateReceived); 
								CentralTimeArray = timeArray; 
								portalqaRepository.Instance.portal.Order_Details.close2.Click();
							}
							        
							else
							{
								portalqaRepository.Instance.portal.Order_Details.close2.Click();
							}
							        
				        }
				        
	     }}
	    
	     public static void MountainTimeFaxCompare()
        {
        	
        	 int indexx = -8;
        	 int offSet = 11;
        	 int offSet2 = 8; 
        	 int maxLoop = 0; 
        	 int multi = indexx + offSet2 - 1; 
        	 int buttonIndexx = 02; 
        	 int buttonCount = 02; 
        	 string buttonCounter = string.Empty;
        	 string buttonCounter1 = string.Empty; 
        	 string found = string.Empty;
        	 string[] textStrArr = {"Created", "Incomplete", "Complete", "Cancelled Without QA"};
        	 string[] textStrArr2 = {};
        	 string[] textStrArr3 = {};
        	 string tmpStr = string.Empty;
        	 string differenceStr = string.Empty; 
        	 string dateReceived; 
        	 string cntrlStr;
        	 string timeArrivedStr = portalqa.formatted.code.utility.ArrivedCentralTime; 
        	 string timeArrivedCompare = portalqa.formatted.code.utility.ArrivedMountainTime;
        	 string exactTimeZone = portalqaRepository.Instance.portal.WorkList.ExactTimeZone.Element.GetAttributeValueText("InnerText");
        	 ArrayList timeArray = new ArrayList(); 
        	 Ranorex.WebDocument foundPage = portalqaRepository.Instance.portal.Self;
        	 //bool found = portalqaRepository.Instance.portal.Order_Details.AttachmentsZero;
        	 bool lowerLevelFlag = false; 
        	 Ranorex.WebElement details2 = portalqaRepository.Instance.portal.WorkList.details2;
        	 //Ranorex.WebElement close = portalqaRepository.Instance.portal.Order_Details.close2; 
        	 Ranorex.TdTag isAttached = null; 
        	 Duration timeout = 3000; 
        	 var window = portalqaRepository.Instance.portal;
        	 var grid = portalqaRepository.Instance.portal.buttons.Column_Headings.rgMasterTable;
        	 //var close2 = portalqaRepository.Instance.portal.Order_Details.close2;
        	 //var editQA = repo.portal.Order_Details.EditQA;
        	 //var viewQA = repo.portal.Order_Details.View;
        	 var date = System.DateTime.Parse("9/18/2012 2:45:44 PM");
        	 var now = System.DateTime.Now;
        	 var difference = now - date; 
        	 //Ranorex.DateTime = now - date; 
        	
	         IList<Ranorex.TrTag> myList = grid.FindDescendants<Ranorex.TrTag>(); 
	         IList<Ranorex.TdTag> myList2 = grid.FindDescendants<Ranorex.TdTag>();
	         
	         portalqa.formatted.testcases.TimeZoneCheck.Instance.MountainTimeAdjust(); 
	         
	         maxLoop = (int)(myList2.Count / (offSet));
         		    
	         for (int j = 1; j < maxLoop; j ++)
	         {

				indexx += offSet; 
				myList2[indexx].MoveTo();

					    try
				        {
					        buttonIndexx += buttonCount;
					        
					        if(buttonIndexx < 10)
					        {
					        	buttonCounter = buttonIndexx.ToString(); 
	        	 				buttonCounter1 = buttonCounter.PadLeft(2, '0'); 
					        }
					        
					        if(buttonIndexx >= 10)
					        {
					        	buttonCounter = buttonIndexx.ToString(); 
	        	 				buttonCounter1 = buttonCounter; 
					        }
					        
	        				
	        				if(buttonIndexx > 0)
	        				{
	        					lowerLevelFlag = true; 
	        				}
				           
				        }
				        catch(Exception e)
				        {
				        	Report.Info("count is off"); 
				        }
				        
				        if(lowerLevelFlag)
				        {
				        	
							cntrlStr = string.Format("/dom[@domain~'devvprtweb{0}']//a[#'ctl00_ctl00_Content_ContentPlaceHolderMain_GridWorklist_ctl00_ctl{1}_DetailsBtn']/img[@title='Details']", StackPortal.ToString(), buttonCounter1.ToString()); 
							Ranorex.Keyboard.Press("{Down}{Down}{Down}{Down}"); 
							Ranorex.Mouse.Click(cntrlStr);
							Ranorex.Delay.Milliseconds(1000); 
							Ranorex.Keyboard.Press("{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}{Down}"); 
							portalqaRepository.Instance.portal.Order_Details.ManageAttachments.PressKeys("{Tab}{Return}");
							//portalqaRepository.Instance.portal.Order_Details.Faxes.Click(); 
							Host.Local.TryFindSingle(string.Format("/dom[@domain~'devvprtweb{0}']//div[#'RadWindowWrapper_ctl00_ctl00_OrderDetails']/table/tbody/tr[2]/td[2]/iframe//tr[#'ctl00_ctl00_Content_ContentPlaceHolderMain_ManageAttachmentsCtrl_gridFaxes_ctl00__0']/td[@innertext~'$']".ToString(), StackPortal.ToString()), timeout, out isAttached);
							   
							if(isAttached != null)
							{
								dateReceived = portalqaRepository.Instance.portal.Order_Details.DateReceived.Element.GetAttributeValueText("InnerText");
								timeArray.Add(dateReceived); 
								MountainTimeArray = timeArray; 
								portalqaRepository.Instance.portal.Order_Details.close2.Click();
							}
							        
							else
							{
								portalqaRepository.Instance.portal.Order_Details.close2.Click();
							}
							        
				        }
				        
	     }}
	    public static void MountainTimeAttachCompare()
        {
        	
        	 int indexx = -8;
        	 int indexxTmp = 0; 
        	 int offSet = 11;
        	 int offSet2 = 8; 
        	 int maxLoop = 0; 
        	 int multi = indexx + offSet2 - 1; 
        	 int buttonIndexx = 02; 
        	 int butntonCounter = 0; 
        	 int buttonCount = 02; 
        	 int buttonCount1 = 00; 
        	 int differenceTot = 0; 
        	 string buttonCounter = string.Empty;
        	 string buttonCounter1 = string.Empty; 
        	 string found = string.Empty;
        	 string[] textStrArr = {"Created", "Incomplete", "Complete", "Cancelled Without QA"};
        	 string[] textStrArr2 = {};
        	 string[] textStrArr3 = {};
        	 string tmpStr = string.Empty;
        	 string differenceStr = string.Empty; 
        	 string differenceTotStr; 
        	 string dateStr;
        	 string cntrlStr;
        	 string dateAttached;
        	 string timeArrivedStr = portalqa.formatted.code.utility.ArrivedCentralTime; 
        	 string timeArrivedCompare = portalqa.formatted.code.utility.ArrivedMountainTime;
        	 string exactTimeZone = portalqaRepository.Instance.portal.WorkList.ExactTimeZone.Element.GetAttributeValueText("InnerText");
        	 ArrayList timeArray = new ArrayList(); 
        	 string[] timeStrArray; 
        	 Duration timeout = 3000; 
        	 bool lowerLevelFlag = false;
        	 Ranorex.SpanTag closeSubmitResults; 
        	 Ranorex.WebElement details2 = portalqaRepository.Instance.portal.WorkList.details2;
        	 Ranorex.TdTag isAttached = null; 
        	 var window = portalqaRepository.Instance.portal;
        	 var grid = portalqaRepository.Instance.portal.buttons.Column_Headings.rgMasterTable;
        	 var date = System.DateTime.Parse("9/18/2012 2:45:44 PM");
        	 var now = System.DateTime.Now;
        	 var difference = now - date; 
        	 
        	
	         IList<Ranorex.TrTag> myList = grid.FindDescendants<Ranorex.TrTag>(); 
	         IList<Ranorex.TdTag> myList2 = grid.FindDescendants<Ranorex.TdTag>();
	         
	         portalqa.formatted.testcases.TimeZoneCheck.Instance.MountainTimeAdjust(); 
	
	         maxLoop = (int)(myList2.Count / (offSet));
         		    
	          for (int j = 1; j < maxLoop; j ++)
	         {

				indexx += offSet; 
				myList2[indexx].MoveTo();

					    try
				        {
					        buttonIndexx += buttonCount;
					        
					        if(buttonIndexx < 10)
					        {
					        	buttonCounter = buttonIndexx.ToString(); 
	        	 				buttonCounter1 = buttonCounter.PadLeft(2, '0'); 
					        }
					        
					        if(buttonIndexx >= 10)
					        {
					        	buttonCounter = buttonIndexx.ToString(); 
	        	 				buttonCounter1 = buttonCounter; 
					        }
					        
	        				
	        				if(buttonIndexx > 0)
	        				{
	        					lowerLevelFlag = true; 
	        				}
				           
				        }
				        catch(Exception e)
				        {
				        	Report.Info("count is off"); 
				        }
				        
				        if(lowerLevelFlag)
				        {
				        	
							cntrlStr = string.Format("/dom[@domain~'devvprtweb{0}']//a[#'ctl00_ctl00_Content_ContentPlaceHolderMain_GridWorklist_ctl00_ctl{1}_DetailsBtn']/img[@title='Details']", StackPortal.ToString(), buttonCounter1.ToString()); 
							Ranorex.Keyboard.Press("{Down}{Down}{Down}{Down}"); 
							Ranorex.Mouse.Click(cntrlStr);
							Ranorex.Delay.Milliseconds(3000); 
							Host.Local.TryFindSingle(string.Format("/dom[@domain~'devvprtweb{0}']//div[#'RadWindowWrapper_ctl00_ctl00_OrderDetails']/table/tbody/tr[2]/td[2]/iframe//tr[#'ctl00_ctl00_Content_ContentPlaceHolderMain_ManageAttachmentsCtrl_gridAttachments_ctl00__0']/td[4]".ToString(), StackPortal.ToString()), timeout, out isAttached);
							   
							if(isAttached != null)
							{
								dateAttached = portalqaRepository.Instance.portal.Order_Details.DateAttached.Element.GetAttributeValueText("InnerText");
								timeArray.Add(dateAttached); 
								MountainTimeArray = timeArray; 
								portalqaRepository.Instance.portal.Order_Details.close2.Click();
							}
							        
							else
							{
								portalqaRepository.Instance.portal.Order_Details.close2.Click();
							}
							        
				        }
				        
					    }}
	    
	    public static void ReportsCentralSubmitDate(string searchString)
	    {
	    	Ranorex.TdTag resultStr = null; 
	    	Ranorex.TdTag resultOutputSt = null; 
	    	int indexx = 0; 
	    	string arrStr = string.Empty;  
	    	string pattern = @"{TDTag:}";
	    	string input = arrStr;
	    	
	    	Duration timeout = 2000;
	    	ArrayList timeArray = new ArrayList();  
	    	
	    	
	    	while (Host.Local.TryFindSingle(string.Format(searchString.ToString(), StackPortal.ToString(), indexx.ToString()), timeout, out resultStr))
	    	{
	    		indexx++;
	    		
	    		if(resultStr != null)
	    		{
	    			arrStr = resultStr.ToString(); 
	    			arrStr = arrStr.Replace("}", ""); 
	    			arrStr = arrStr.Replace("{TdTag:", ""); 
	    			Ranorex.Report.Info("Central time string is" + arrStr);
	    			timeArray.Add(arrStr);
					CentralTimeArray = timeArray; 
	    		}
	    		
	    		
	    	}
	    }
	    
	     public static void ReportsCentralDistributedDate(string searchString)
	    {
	    	Ranorex.TdTag resultStr = null; 
	    	Ranorex.TdTag resultOutputSt = null; 
	    	int indexx = 0; 
	    	string arrStr = string.Empty;  
	    	string pattern = @"{TDTag:}";
	    	string input = arrStr;
	    	
	    	Duration timeout = 2000;
	    	ArrayList timeArray = new ArrayList();  
	    	
	    	
	    	while (Host.Local.TryFindSingle(string.Format(searchString.ToString(), StackPortal.ToString(), indexx.ToString()), timeout, out resultStr))
	    	{
	    		indexx++;
	    		
	    		if(resultStr != null)
	    		{
	    			arrStr = resultStr.ToString(); 
	    			arrStr = arrStr.Replace("}", ""); 
	    			arrStr = arrStr.Replace("{TdTag:", ""); 
	    			Ranorex.Report.Info("Central time string is" + arrStr);
	    			timeArray.Add(arrStr);
					CentralTimeArray = timeArray; 
	    		}
	    		
	    		
	    	}
	    }
	     
	       public static void ReportsMountainDistributedDate(string searchString)
	    {
	    	Ranorex.TdTag resultStr = null; 
	    	Ranorex.TdTag resultOutputSt = null; 
	    	int indexx = 0; 
	    	string arrStr = string.Empty;  
	    	Duration timeout = 2000;
	    	ArrayList timeArray = new ArrayList();  
	    	
	    	while (Host.Local.TryFindSingle(string.Format(searchString.ToString(), StackPortal.ToString(), indexx.ToString()), timeout, out resultStr))
	    	{
	    		indexx++;
	    		
	    		if(resultStr != null)
	    		{
	    			arrStr = resultStr.ToString(); 
	    			arrStr = arrStr.Replace("}", ""); 
	    			arrStr = arrStr.Replace("{TdTag:", "");
	 
	    			Ranorex.Report.Info("Mountain time string is" + arrStr);
	    			timeArray.Add(arrStr);
					MountainTimeArray = timeArray; 
	    		}
	    		
	    		
	    	}
	    }
	    
	      public static void ReportsMountainSubmitDate(string searchString)
	    {
	    	Ranorex.TdTag resultStr = null; 
	    	Ranorex.TdTag resultOutputSt = null; 
	    	int indexx = 0; 
	    	string arrStr = string.Empty;  
	    	Duration timeout = 2000;
	    	ArrayList timeArray = new ArrayList();  
	    	
	    	while (Host.Local.TryFindSingle(string.Format(searchString.ToString(), StackPortal.ToString(), indexx.ToString()), timeout, out resultStr))
	    	{
	    		indexx++;
	    		
	    		if(resultStr != null)
	    		{
	    			arrStr = resultStr.ToString(); 
	    			arrStr = arrStr.Replace("}", ""); 
	    			arrStr = arrStr.Replace("{TdTag:", "");
	 
	    			Ranorex.Report.Info("Mountain time string is" + arrStr);
	    			timeArray.Add(arrStr);
					MountainTimeArray = timeArray; 
	    		}
	    		
	    		
	    	}
	    }
	      
	      public static void WorklistCentralQACreated(string searchStr)
	    {
	    	Ranorex.TdTag resultStr = null; 
	    	Ranorex.TdTag resultOutputSt = null; 
	    	int indexx = 0; 
	    	string arrStr = string.Empty;  
	    	Duration timeout = 2000;
	    	ArrayList timeArray = new ArrayList();  
	    	
	    	while (Host.Local.TryFindSingle(string.Format(searchStr.ToString(), StackPortal.ToString(), indexx.ToString()), timeout, out resultStr))
	    	{
	    		indexx++;
	    		
	    		if(resultStr != null)
	    		{
	    			arrStr = resultStr.ToString(); 
	    			arrStr = arrStr.Replace("}", ""); 
	    			arrStr = arrStr.Replace("{TdTag:", "");
	 
	    			Ranorex.Report.Info("Central time string is" + arrStr);
	    			timeArray.Add(arrStr);
					CentralTimeArray = timeArray; 
	    		}
	    		
	    		
	    	}
	    }
	      
	      public static void WorklistMountainQACreated(string searchStr)
	    {
	    	Ranorex.TdTag resultStr = null; 
	    	Ranorex.TdTag resultOutputSt = null; 
	    	int indexx = 0; 
	    	string arrStr = string.Empty;  
	    	Duration timeout = 2000;
	    	ArrayList timeArray = new ArrayList();  
	    	
	    	while (Host.Local.TryFindSingle(string.Format(searchStr.ToString(), StackPortal.ToString(), indexx.ToString()), timeout, out resultStr))
	    	{
	    		indexx++;
	    		
	    		if(resultStr != null)
	    		{
	    			arrStr = resultStr.ToString(); 
	    			arrStr = arrStr.Replace("}", ""); 
	    			arrStr = arrStr.Replace("{TdTag:", "");
	 
	    			Ranorex.Report.Info("Central time string is" + arrStr);
	    			timeArray.Add(arrStr);
					MountainTimeArray = timeArray; 
	    		}
	    		
	    		
	    	}
	    }
	      
	      public static int CountSearch()
	      {
	      	ArrayList tmpArr = new ArrayList(); 
	      	string tdStr = "/dom[@domain~'$']//tr[@id~'(?i:GridSearch_ctl00__{0})']/td[@innertext='Complete']"; 
	      	string countStr; 
	      	Ranorex.TdTag tdFound;
	      	Duration timeout = 5000;
	      	int count = 0; 
	      	int indexx = 0;
	      	//while(Host.Local.TryFindSingle("/dom[@domain~'$']//tr[@id~'(?i:GridSearch_ctl00__0)']/td[@innertext='Complete']"))
	      	
	      	while(Host.Local.TryFindSingle(string.Format(tdStr, indexx), timeout, out tdFound))
	      	{
	      		indexx++;
	      		tdFound.MoveTo(); 
	      		tmpArr.Add(tdFound);
	      		count = tmpArr.Count; 
	      	 }
	      	
	 		countStr = count.ToString(); 
	 		Report.Info("Total number of QA items: " + countStr); 
	 		CompletedQA = count; 
	 		return count;
	      }
	      
	      public static void TypeDate(Ranorex.InputTag box)
	      {
	      	System.DateTime now = System.DateTime.Today; 
	      	string nowStr; 
	      	
	      	nowStr = now.ToString("MM/dd/yyyy"); 
	      	
	      	try
	      	{
	      		box.MoveTo(); 
	      		box.PressKeys(nowStr);
	      		Report.Info("Typing END Date: " + nowStr);
	      	}
	      	catch(Exception e)
	      	{
	      		Report.Failure("fail"); 
	      	}
	      	
	      }
	      
	      public static void TypeBeginDate(Ranorex.InputTag box)
	      {
	      	System.DateTime now = System.DateTime.Today; 
	      	System.DateTime monthAgo = now.AddMonths(-1); 
	      	string monthAgoStr;
	      	
	      	monthAgoStr = monthAgo.ToString("MM/01/yy"); 
	      	
	      	try
	      	{
	      		box.MoveTo(); 
	      		box.PressKeys(monthAgoStr);
	      		Report.Info("Typing Begin Date: " + monthAgoStr); 
	      	}
	      	catch(Exception e)
	      	{
	      		Report.Failure("fail"); 
	      	}
	      }
	      
	      public static void SearchAndReportsCompare(int reportCount)
	      {
	      	if(CompletedQA == reportCount)
	      	{
	      		Report.Info("Search Routine determined the count was: " + CompletedQA); 
	      		Report.Info("Reports Tab determined the count was: " + reportCount); 
	      		Report.Info("these items match"); 
	      	}
	      	
	      	else
	      	{
	      		Report.Info("Search Routine determined the count was: " + CompletedQA); 
	      		Report.Info("Reports Tab determined the count was: " + reportCount);
	      		Report.Failure("These items do not match"); 
	      	}
	      
	      }
	      
	    
	    public static void SearchCentralQACreated(string searchStr)
	    {
	    	Ranorex.TdTag resultStr = null; 
	    	Ranorex.TdTag resultOutputSt = null; 
	    	int indexx = 0; 
	    	string arrStr = string.Empty;  
	    	Duration timeout = 2000;
	    	ArrayList timeArray = new ArrayList();  
	    	
	    	while (Host.Local.TryFindSingle(string.Format(searchStr.ToString(), StackPortal.ToString(), indexx.ToString()), timeout, out resultStr))
	    	{
	    		indexx++;
	    		
	    		if(resultStr != null)
	    		{
	    			arrStr = resultStr.ToString(); 
	    			arrStr = arrStr.Replace("}", ""); 
	    			arrStr = arrStr.Replace("{TdTag:", "");
	 
	    			Ranorex.Report.Info("Central time string is" + arrStr);
	    			timeArray.Add(arrStr);
					CentralTimeArray = timeArray; 
	    		}
	    		
	    		
	    	}
	    }
	    
	    
	    public static void SearchMountainQACreated(string searchStr)
	    {
	    	Ranorex.TdTag resultStr = null; 
	    	Ranorex.TdTag resultOutputSt = null; 
	    	int indexx = 0; 
	    	string arrStr = string.Empty;  
	    	Duration timeout = 2000;
	    	ArrayList timeArray = new ArrayList();  
	    	
	    	while (Host.Local.TryFindSingle(string.Format(searchStr.ToString(), StackPortal.ToString(), indexx.ToString()), timeout, out resultStr))
	    	{
	    		indexx++;
	    		
	    		if(resultStr != null)
	    		{
	    			arrStr = resultStr.ToString(); 
	    			arrStr = arrStr.Replace("}", ""); 
	    			arrStr = arrStr.Replace("{TdTag:", "");
	 
	    			Ranorex.Report.Info("Central time string is" + arrStr);
	    			timeArray.Add(arrStr);
					MountainTimeArray = timeArray; 
	    		}
	    		
	    		
	    	}
	    }
	         
          
          public static void DateFinalFirstRow2()
        {
        	
        	
        	 string found = string.Empty;
        	 string[] textStrArr = {"Created", "Incomplete", "Complete", "Cancelled Without QA"};
        	 string[] textStrArr2 = {};
        	 string[] textStrArr3 = {};
        	 string tmpStr = string.Empty;
        	 string differenceStr = string.Empty; 
        	 string differenceTotStr; 
        	 string dateStr = string.Empty;
        	 int differenceTot = 0; 
        	 
        	 var based = System.DateTime.Parse("9/18/2012 2:45:44 PM");
        	 var compare = System.DateTime.Parse("9/18/2012 2:45:44 PM");;
        	 var difference = based - compare; 
        	 //Ranorex.DateTime = now - date; 
        	  
	         				 
	         				based = System.DateTime.Parse(dateStr);
	         				difference = based - compare; 
	         				differenceStr = difference.ToString();
	        				differenceTot = Convert.ToInt32(difference.TotalDays);
	         				differenceTotStr = differenceTot.ToString(); 
	         				Console.WriteLine("There are {0:#.##} days between {1} and {2}.", difference.TotalDays, based, compare);
	         				Report.Info(differenceStr); 
	         				Report.Info(differenceTotStr); 

			         	
	         }
	         			
	    	
	         
          
          public static void dateCheck(string timeArrivedStr, string compareDateStr, string tmpStr)
          {
          	//string compareDateStr = string.Empty; 
          	string differenceStr = string.Empty; 
          	string differenceTotStr = string.Empty; 
          	int differenceTot = 0; 
          	string[] timeZones = {"Central Time ", "Mountain Time "}; 
          	string[] zones = {"0", "1", "2", "3", "4"};
          	var baseDate = System.DateTime.Parse("9/18/2012 2:45:44 PM");
          	var compareDate = System.DateTime.Parse("9/18/2012 2:45:44 PM");
          	var difference = baseDate - compareDate;  
          	bool rtnStatus = false; 
          	
          	if(rtnStatus == false)
	          	
          		try
	          	{
	          		baseDate = System.DateTime.Parse(timeArrivedStr);
	          		compareDate = System.DateTime.Parse(compareDateStr); 
	          		Report.Info("Pased everything correctly"); 
	          		rtnStatus = true; 
	          	}
	          	
          		catch(Exception e)
	          	{
	          		Report.Failure("failure on parse"); 
	          	}
          	
	          		if(rtnStatus == true)
	          		{
	          			difference = baseDate - compareDate;  
	          			differenceTot = Convert.ToInt32(difference.TotalHours);
	         			differenceTotStr = differenceTot.ToString(); 
	          			differenceStr = difference.ToString();
	          			Report.Info("Calculation is equal to: " + differenceStr); 
	          			
	          			
	          			if(tmpStr == timeZones[0])
	          			{
		          				//Central Time Zone Check
		          			if(differenceTotStr == "0" && tmpStr == timeZones[0])
		          			{
		          				
		          				Report.Success("Compares to Central Time"); 
	
		          			} 
		          			else
		          			{
		          				Report.Failure("did not match CENTRAL timezone");
		          			}
	          			}
	          			
	          			if(tmpStr == timeZones[1])
	          			{
	          				//Mountain Time Zone Check
		          			if(differenceTotStr == zones[1] && tmpStr == timeZones[1])
		          			{
		          				
		          				Report.Success("Compares to Mountain Time"); 
	
		          			} 
		          			else
		          			{
		          				Report.Failure("did not match Mountain timezone");
		          			}
	          			}
	          			
	          		}
	          	
          }
          
           public static void DateArrayCheck()
        {
            ArrayList extract = new ArrayList();
            string centralDate = string.Empty; 
            string mountainDate = string.Empty; 
            string differenceStr = string.Empty; 
          	string differenceTotStr = string.Empty; 
          	int differenceTot = 0; 
          	string[] timeZones = {"Central Time ", "Mountain Time "}; 
          	string[] zones = {"0", "1", "2", "3", "4"};
          	var baseDate = System.DateTime.Parse("9/18/2012 2:45:44 PM");
          	var compareDate = System.DateTime.Parse("9/18/2012 2:45:44 PM");
          	var difference = baseDate - compareDate;  
          	bool rtnStatus = false; 
          	 
            for (int i = 0; i < CentralTimeArray.Count; i++)
            {
                centralDate = (string)CentralTimeArray[i];

                //for (int j = 0; j < MountainTimeArray.Count; j++)
                //{
                mountainDate = (String)MountainTimeArray[i]; 
                	
                if(CentralTimeArray.Count == MountainTimeArray.Count)
                {
	          	
                	if(CentralTimeArray[i] != null)
                	{
                		
                	try
		          	{
		          		baseDate = System.DateTime.Parse(centralDate);
		          		compareDate = System.DateTime.Parse(mountainDate); 
		          		Report.Info("Pased everything correctly"); 
		          		rtnStatus = true; 
		          	}
		          	
	          		catch(Exception e)
		          	{
		          		Report.Failure("failure on parse"); 
		          	}
	          	
		          		if(rtnStatus == true)
		          		{
		          			difference = baseDate - compareDate;  
		          			differenceTot = Convert.ToInt32(difference.TotalHours);
		         			differenceTotStr = differenceTot.ToString(); 
		          			differenceStr = difference.ToString();
		          			Report.Info("Calculation is equal to: " + differenceStr); 
		          			
		          				//Mountain Time Zone Check
			          			if(differenceTotStr == zones[1])
			          			{
			          				
			          				Report.Success("Compares to Mountain Time"); 
		
			          			} 
			          			else
			          			{
			          				Report.Failure("did not match Mountain timezone");
			          			}
		          			
		          			
		          		}
                }}
                //}
            }}
               
                
        
          public static void SetRADLogOnCriteria(string logOnNameStr, string logOnPasswordStr)
          {
          	var repo = portalqaRepository.Instance;
//            var install = repo.OCInstall.Install;
//            var no = repo.VoiceDictation.No;
//            var button = repo.Login.button;

          	UserNameStr = logOnNameStr;
			PasswordStr = logOnPasswordStr;
          	
			portalqaRepository.Instance.OC.Username.PressKeys(UserNameStr);
			
			Report.Log(ReportLevel.Info, "Keyboard", "Key sequence 'PasswordStr' with focus on 'OC.password'.", new RecordItemIndex(7));
            portalqaRepository.Instance.OC.password.PressKeys("{Return}");
            Delay.Milliseconds(0);
            repo.Login.button.Click(); 
            
            repo.OCInstall.Install.Click(); 
            Delay.Duration(22000);
            
//            repo.OCInstall.Install.Click();
//            Delay.Duration(22000);
            
           Delay.Duration(10000);
           repo.VoiceDictation.No.Click();
           
           repo.Warning.Self.PressKeys("{Tab down}{Return}");
           utility.ClickButton(btnCntrlStr2[0].ToString()); 

            
          }
          
          
          
          public static void SetAdminLogOnCriteria(string logOnNameStr, string logOnPasswordStr)
          {
          	var repo = portalqaRepository.Instance;
          	var username = repo.WindowsSecurity.Username; 
          	var password = repo.WindowsSecurity.Password;
			var buttonOK = repo.WindowsSecurity.ButtonOkay;
			 

			UserNameStr = logOnNameStr;
			PasswordStr = logOnPasswordStr;
			
			Report.Log(ReportLevel.Info, "Keyboard", "Key sequence 'UserNameStr' with focus on 'OC.Username'.", new RecordItemIndex(6));
            username.PressKeys(UserNameStr);
            Delay.Milliseconds(0);
            

            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence 'PasswordStr' with focus on 'OC.password'.", new RecordItemIndex(7));
            password.PressKeys(PasswordStr + "{Return}");
            //buttonOK.Press(); 
            Delay.Milliseconds(0);
            
            

          }
            public static bool Rmdir(string command)
		{
		        
		     try
		     {
		         // create the ProcessStartInfo using "cmd" as the program to be run,
		         // and "/c " as the parameters.
		         // Incidentally, /c tells cmd that we want it to execute the command that follows,
		         // and then exit.
			    System.Diagnostics.ProcessStartInfo procStartInfo =
			        new System.Diagnostics.ProcessStartInfo("cmd", "/c " + command);
			
			    procStartInfo.RedirectStandardOutput = true;
			    procStartInfo.UseShellExecute = false;
			    procStartInfo.CreateNoWindow = true;
			    //   procStartInfo.UserName = "brad.cromie";
			   
			    // Now we create a process, assign its ProcessStartInfo and start it
			    System.Diagnostics.Process proc = new System.Diagnostics.Process();
			    proc.StartInfo = procStartInfo;
			    proc.Start();
			    Thread.Sleep(2000);
			    proc.Kill();
			    
			    
			    return true;
		    
		   
		      }
		     catch (Exception objException)
		      {
		      	
		      	
		      return false;
		      // Log the exception
		      }
            }
            
             			
         public void example()
        {
           
        	// TrTag allSpan = "/dom[@domain='devvprtweb405']//table[#'ctl00_ctl00_Content_ContentPlaceHolderMain_ReportGrid_ctl00_ctl04_ctl00_PrelimByMonthReportGrid_ctl00']/tbody";
           string trStr = portalqaRepository.Instance.portal.QAReports.tr2Info.AbsolutePath.ToString();
          string numReports = "0"; 
          string colMax = "0";
          string rowMax = "0"; 
          int rows = -0; 
          int numMonths;
          int monthCountInt; 
          string column = ""; 
          TBodyTag span = Host.Local.FindSingle(trStr, 30000);
          TBodyTag span2 = portalqaRepository.Instance.portal.QAReports.tr2; 
          DivTag final; 
          string tb; 
          WebElement tb2; 
          TBodyTag tbody2; 
          TrTag build2;
          DivTag divBuild3; 
          string dom = "/dom[@domain='devvprtweb405']"; 
          string trF = "//tr[#'";
          string trL = "']";
          string end = "/td[6]/div[2]";
          string tdEnd = "']//td[6]/div[2]";
          string build; 
          string tagStr;
          string build2Str;
          string build3; 
          string tBody = "/td/div/table/tbody/"; 
          IList<TdTag> tdList;  
          ArrayList trArr = new ArrayList(); 
          ArrayList trArr2 = new ArrayList(); 
          ArrayList tbodyArr = new ArrayList(); 
          ArrayList tbody2Arr = new ArrayList(); 
          ArrayList tdArr = new ArrayList(); 
          ArrayList tbArr = new ArrayList();
          string monthCountStr = monthCount; 
          monthCountInt = 8; //Convert.ToInt32(monthCount);
          /*int totalDivision = monthCountInt * reportCount; 
           
          int partitionNum = reportCount; 
          int subtractValue = totalDivision / reportCount; 
          int LastPartition = totalDivision - subtractValue; 
          int middlePartition = maxParition - subtractValue; */
          int firstPartition = monthCountInt; 
          int secondPartition = monthCountInt + monthCountInt;
          int thirdPartititon = monthCountInt * 3;
          int fourthPartition = monthCountInt + monthCountInt + monthCountInt;
          int fifthPartition = monthCountInt * 4;
           
          
          //int numMonths = Convert.ToInt32(monthCount); 
        
          int numReportsInt = 3; 
          int numRowInt = 9; //Convert.ToInt32(rowMax);  
          numRowInt = Convert.ToInt32(monthCount); 
          int numColInt = Convert.ToInt32(colMax);
          //string[,] colArr = new string[numReportsInt, ];
          string[,] colArr = null;
         
          
          var allspan3 = span.FindDescendants<TrTag>();
          var allspan4 = span2.FindChildren<TrTag>(); 
         // var allspan5 = tbody2.FindDescendants<TrTag>();
          
          //get the root trtag
          foreach(var tag2 in allspan4)
          {
          	tagStr = tag2.ToString().Replace("{TrTag:", "");
          	tagStr = tagStr.Replace("}", "");
          	
          	build = string.Format(dom.ToString() + trF + tagStr.ToString() + trL);
         
          	trArr.Add(build); 
          }
          
	          //append the tbody text to it and need to find tr descendents
	          for(int j =0; j < trArr.Count; j++)
	          {
	          	build2Str = trArr[j].ToString(); 
	          	build = string.Format(trArr[j].ToString() + tBody.ToString());
	          	//tb = build;
	          	
	          	tbArr.Add(build); 
	          	
	          	/// build this type of string dom[@domain='devvprtweb405']//tr[#'ctl00_ctl00_Content_ContentPlaceHolderMain_ReportGrid_ctl00__0']/td/div/table/tbody/
	          	//total number of reports
	          }
	          
		          //get the TRtag from the /tbody base 
		          for(int h = 0; h < tbArr.Count; h++)
		          {
		          	
		          	build2Str = tbArr[h].ToString();
		          	tbody2 = build2Str.ToString();
		   
		          	var trTags = tbody2.FindDescendants<TrTag>();
		          	//also derivative of number of months
		          	monthCount = trTags.Count.ToString(); 
		          	
			          	foreach(TrTag tag5 in trTags)
			          	{
			          		//cut tag bs
	
			          		tagStr = tag5.ToString().Replace("{TrTag:", "");
				          	tagStr = tagStr.Replace("}", "");
			          		//pull it out
			          		//append to final string
			          		build = string.Format(dom.ToString() + trF + tagStr.ToString() + tdEnd);
			          		final = build.ToString(); 
			          		final.Element.GetAttributeValueText("InnerText"); 
			          		tagStr = final.ToString().Replace("{DivTag:", "");
				          	tagStr = tagStr.Replace("}", "");
				          	//intTagInt = Convert.ToInt32(tagStr); 
			          		trArr2.Add(build);
			          		
			          		RowInnerNum.Add(tagStr);
			          		//colArr[0, 0] = tagStr; 
			          		
			          		
									          			
			          			
//			          			for (int i=0; i<numReportsInt; i++)
//								{
//									    for (int j=0; j<=numRowInt; j++)
//									    {
//									        colArr[i,j] = ("i" + 1) * (j + 1);
//									    }
//								}
			          			
			          				
			          		
			          			/*if(rowInnerNum.Count <= secondPartition)
			          			{
			          				for(int j = 0; j < colArr.GetUpperBound(0); j++)
			          				{
			          					colArr[i, j] = colArr;
			          				}
			          			}
			          		
			          				if(rowInnerNum.Count <= thirdPartititon)
			          				{
			          					for(int k = 0; k < colArr.GetUpperBound(0); k++)
			          					{
			          						colArr[2, 0] = tagStr; 
			          					}
			          				}*/
			          		
			          	} } 
       
       						if(RowInnerNum.Count != null)
			          		{
			          			
			          			colArr = new string[numReportsInt, monthCountInt];
			          			
			          			for(int i = 0; i < numReportsInt; i++)
			          			    {
			          				
			          			    	for(int k = 0; k < monthCountInt; k++)
				          				{
				          					//colArr = new colArr[];
			          			    		colArr[i,k] = RowInnerNum[k].ToString();
			          			    		 
				          				}
			          			    	
			          				}
			          			
			          			List<string> one = new List<string>(); 
       							foreach(string colStr in colArr)
       							{
       								one.Add(colStr); 
       							}
       						} }
         
         public static void GridOne()
         {
         	
         	public string col1 { get; set; }
         }
       	
         public static void NumMonths()
        {
        	TBodyTag trTagz = portalqaRepository.Instance.portal.QAReports.InnerGrid;
        	string trStr = portalqaRepository.Instance.portal.QAReports.InnerGridInfo.AbsolutePath.ToString();
        	string countNum; 
        	string total; 
        	//var trTags;
        	Duration timeout = 30000;
        	WebElement count; 
        	//ArrayList countArr = new ArrayList();
        	IList<Ranorex.TrTag> countList;
        	
        	
        	/*while(Host.Local.TryFindSingle(trStr, timeout, out count) )
        	{
        		countNum = count.Element.GetAttributeValueText("InnerText"); 
        		countArr.Add(countNum); 
        		total = countArr.Count.ToString();
        		Report.Info(total); 
        	}*/ 
        	
        			countList = trTagz.FindDescendants<TrTag>();
		          	//also derivative of number of months
		          	monthCount = countList.Count.ToString(); 
        }
       			
         
		     
             public static bool GetUninstallCommandFor(string publisherDisplayName)
        {
            RegistryKey localMachine = Registry.Users;
            string productsRoot = @"S-1-5-21-3864201282-3261486089-2950030240-24260\Software\Microsoft\Windows\CurrentVersion\Uninstall";
            RegistryKey products = localMachine.OpenSubKey(productsRoot);
            string[] productFolders = products.GetSubKeyNames();

            foreach (string p in productFolders)
            {
                RegistryKey installProperties = products.OpenSubKey(p);

                    string displayName = (string)installProperties.GetValue("Publisher");
                    if ((displayName != null) && (displayName.Contains(publisherDisplayName)))
                    {
                        string uninstallCommand = (string)installProperties.GetValue("UninstallString");
                        ExecuteCommandSync (uninstallCommand);
                        
                    }
            }
          
        
             return true;
            
        }
             
         public static bool ExecuteCommandSync(string command)
		{
		        
		     try
		     {
		         // create the ProcessStartInfo using "cmd" as the program to be run,
		         // and "/c " as the parameters.
		         // Incidentally, /c tells cmd that we want it to execute the command that follows,
		         // and then exit.
			    System.Diagnostics.ProcessStartInfo procStartInfo =
			        new System.Diagnostics.ProcessStartInfo("cmd", "/c " + command);
			
			    procStartInfo.RedirectStandardOutput = true;
			    procStartInfo.UseShellExecute = false;
			    procStartInfo.CreateNoWindow = true;
			    //   procStartInfo.UserName = "brad.cromie";
			   
			    // Now we create a process, assign its ProcessStartInfo and start it
			    System.Diagnostics.Process proc = new System.Diagnostics.Process();
			    proc.StartInfo = procStartInfo;
			    proc.Start();
			    Thread.Sleep(2000);
			    portalqa.formatted.code.UserCodeModule1.Uninstall_Okbutton();
			    proc.Kill();
			    Thread.Sleep(15000);
			    
			    return true;
		    
		   
		      }
		      catch (Exception objException)
		      {
		      	
		      	
		      return false;
		      // Log the exception
		      }
		}
		 
          
          public static void SetOCPortalStack(string stack)
          {
          	string stackTmp = null; 
          	
          	if(stack == "403")
          	{
          		portalqa.formatted.portal.OC.StartOC403.Start(); 
          	}
          	
          	if(stack == "405")
          	{
          		portalqa.formatted.portal.OC.StartOC405.Start(); 
          	}
          }
          
           public static void SetRADPortalStack(string stack)
          {
          	string stackTmp = null; 
          	
          	if(stack == "403")
          	{
          		portalqa.formatted.portal.Rad.StartRad403.Start(); 
          	}
          	
          	if(stack == "405")
          	{
          		portalqa.formatted.portal.Rad.StartRad405.Start(); 
          	}
          }
          
          public static void SetAdminStack(string stack)
          {
          	string stackTmp = null; 
          	
          	if(stack == "403")
          	{
          		portalqa.formatted.risadmin.Start403.Start(); 
          	}
          	
          	if(stack == "405")
          	{
          		portalqa.formatted.risadmin.Start405.Start(); 
          	}
          }
          
           public static void ClickButton(string btnStr)
          {
          	
        	Ranorex.WebElement qaCtrl = null;
        	Duration timeout = 15000;
        	IList msgListArr = null;
        	string apCtrlStr = string.Format(btnStr, StackPortal.ToString());
        	string btnStrTmp = string.Empty;
        	bool found = Host.Local.TryFindSingle(apCtrlStr.ToString(), timeout, out qaCtrl);
        	
        	if(found)
        	{
	        	msgListArr = (IList)qaCtrl.Children;
	        	//btnStrTmp = msgListArr[0].ToString();
	        	//btnStr = btnStrTmp; 
	        	//recordingname.start(); 
	        	Ranorex.Mouse.MoveTo(apCtrlStr);
	        	Ranorex.Mouse.Click();
	        	
	        	Report.Info("This button was clicked: ", apCtrlStr);
	        	 
	        	//portalqa.formatted.code.utility.TargetString(targStr.ToString());
        	}
        	else
        	{
        		Report.Info("Can not build string/dialog"); 
        	}
        	
          }
           
             public static void DoubleClickButton(string btnStr)
          {
          	
        	Ranorex.WebElement qaCtrl = null;
        	Duration timeout = 15000;
        	IList msgListArr = null;
        	string apCtrlStr = string.Format(btnStr, StackPortal.ToString());
        	string btnStrTmp = string.Empty;
        	bool found = Host.Local.TryFindSingle(apCtrlStr.ToString(), timeout, out qaCtrl);
        	
        	if(found)
        	{
	        	msgListArr = (IList)qaCtrl.Children;
	        	//btnStrTmp = msgListArr[0].ToString();
	        	//btnStr = btnStrTmp; 
	        	//recordingname.start(); 
	        	Ranorex.Mouse.MoveTo(apCtrlStr);
	        	Ranorex.Mouse.DoubleClick();
	        	
	        	Report.Info("This button was clicked: ", apCtrlStr);
	        	 
	        	//portalqa.formatted.code.utility.TargetString(targStr.ToString());
        	}
        	else
        	{
        		Report.Info("Can not build string/dialog"); 
        	}
        	
          }
           
            public static void Validation(string btnStr)
          {
          	
        	Ranorex.WebElement qaCtrl = null;
        	Duration timeout = 15000;
        	IList msgListArr = null;
        	string apCtrlStr = string.Format(btnStr, StackPortal.ToString());
        	string btnStrTmp = string.Empty;
        	bool found = Host.Local.TryFindSingle(apCtrlStr.ToString(), timeout, out qaCtrl);
        	
        	if(found)
        	{
	        	msgListArr = (IList)qaCtrl.Children;
	        	//btnStrTmp = msgListArr[0].ToString();
	        	//btnStr = btnStrTmp; 
	        	//recordingname.start(); 
	        	Ranorex.Mouse.MoveTo(apCtrlStr);
	        	Validate.Exists(apCtrlStr); 
	        
	        	
	        	Report.Info("This value exists: ", apCtrlStr);
	        	 
	        	//portalqa.formatted.code.utility.TargetString(targStr.ToString());
        	}
        	else
        	{
        		Report.Info("Can not build string/dialog"); 
        	}
        	
          }
            
             public static void Type(string btnStr)
          {
          	
        	Ranorex.WebElement qaCtrl = null;
        	Ranorex.WebElement userField = null; 
        	Duration timeout = 15000;
        	IList msgListArr = null;
        	string apCtrlStr = string.Format(btnStr, StackPortal.ToString());
        	string btnStrTmp = string.Empty;
        	bool found = Host.Local.TryFindSingle(apCtrlStr.ToString(), timeout, out qaCtrl);
        	
        	if(found)
        	{
	        	msgListArr = (IList)qaCtrl.Children;
	        	//btnStrTmp = msgListArr[0].ToString();
	        	//btnStr = btnStrTmp; 
	        	//recordingname.start(); 
	        	Ranorex.Mouse.MoveTo(apCtrlStr);
	        	userField = apCtrlStr; 
	        	userField.PressKeys(UserNameStr);
	        	
	        	Report.Info("This value exists: ", apCtrlStr);
	        	 
	        	//portalqa.formatted.code.utility.TargetString(targStr.ToString());
        	}
        	else
        	{
        		Report.Info("Can not build string/dialog"); 
        	}
        	
          }
          
          
        
          /*public static bool TargetString(string targTxtStr)
          {
          	bool rtnStatus = false; 
          	string iListitemStr = string.Empty;
          	IList iListArr = null;
          	iListArr.Add(targTxtStr); 
     
          	for(int i = 0; i <= iListArr.Count - 1; i++)
          	{
          		iListitemStr = iListArr[i].ToString(); 
          		
          		if(iListitemStr.Contains(targTxtStr))
          		{
          			rtnStatus = true; 
          			break; 
          		}
          		
          		
          		
          		
          	}
          	
          }*/
           
          
          public static void VerifyLimit(string cell, int limitz)
        {
           		
           	 
            string cellString = string.Empty; 
            int cellInt = cell.Length; 
            	
            	
            	
            	Report.Log(ReportLevel.Info, "Get Value", "Getting attribute 'InnerText' from item 'portal.QA.PhoneTextField' and assigning its value to variable 'phoneInnerText'.", portalqaRepository.Instance.portal.QA.PhoneTextFieldInfo);

            	cellString = cellInt.ToString(); 
            	
            	if(cellInt >= limitz)
            	
	            	{
	            		Report.Failure("Fail.  Limit does not seem to match"); 
	            	}
            		
            	else
            	{
            		Report.Success("Pass.  Limit seems to match the requirements"); 
            	}
            	
            	
            	Report.Info(cellString);
            	
            	
            	
        }
          
        
          
           
         
    }
}

    
